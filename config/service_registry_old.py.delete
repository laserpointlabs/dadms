"""
Service Registry Configuration

This module provides dynamic service discovery by reading service configurations
from service folders. Each service should have a service_config.json file that
defines its configuration.
"""

import os
import json
import glob
from typing import Dict, Any, Optional

def load_service_config(service_path: str) -> Optional[Dict[str, Any]]:
    """
    Load service configuration from a service folder.
    
    Args:
        service_path: Path to the service folder
        
    Returns:
        Service configuration dictionary or None if not found
    """
    config_file = os.path.join(service_path, "service_config.json")
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"Error loading service config from {config_file}: {e}")
    return None

def discover_services() -> Dict[str, Dict[str, Any]]:
    """
    Discover all services by scanning service folders for service_config.json files.
    
    Returns:
        Dictionary organized by service type, then service name
    """
    services = {}
    
    # Get the base directory (parent of config)
    base_dir = os.path.dirname(os.path.dirname(__file__))
    services_dir = os.path.join(base_dir, "services")
    
    if not os.path.exists(services_dir):
        print(f"Services directory not found: {services_dir}")
        return services
    
    # Scan each service folder
    for service_folder in os.listdir(services_dir):
        service_path = os.path.join(services_dir, service_folder)
        if os.path.isdir(service_path):
            config = load_service_config(service_path)
            if config and 'service' in config:
                service_config = config['service']
                service_type = service_config.get('type', 'unknown')
                service_name = service_config.get('name', service_folder)
                
                # Initialize service type if not exists
                if service_type not in services:
                    services[service_type] = {}
                
                # Add service configuration
                endpoint_port = service_config.get('port', 5000)
                services[service_type][service_name] = {
                    'endpoint': f"http://localhost:{endpoint_port}",
                    'description': service_config.get('description', f'{service_name} service'),
                    'health_endpoint': service_config.get('health_endpoint', '/health'),
                    'folder': service_folder,
                    'config': service_config
                }
    
    return services

# Dynamic service registry - populated from service configs
_discovered_services = None

def get_discovered_services() -> Dict[str, Dict[str, Any]]:
    """Get discovered services, caching the result."""
    global _discovered_services
    if _discovered_services is None:
        _discovered_services = discover_services()
        print(f"Discovered {sum(len(svc) for svc in _discovered_services.values())} services across {len(_discovered_services)} types")
    return _discovered_services

def refresh_service_discovery():
    """Force refresh of service discovery."""
    global _discovered_services
    _discovered_services = None
    return get_discovered_services()

# Legacy fallback registry for backward compatibility
FALLBACK_SERVICE_REGISTRY = {
    "assistant": {
        "openai": {
            "endpoint": "http://localhost:5000",
            "description": "OpenAI Assistant for processing decision tasks",
            "assistant_id": None
        }
    },
    "test": {
        "echo": {
            "endpoint": "http://localhost:5100",
            "description": "Echo test service for demonstration",
        }
    }
}

# Environment variable to override OpenAI service endpoint
import os
openai_service_url = os.environ.get("OPENAI_SERVICE_URL")
if openai_service_url is not None:
    SERVICE_REGISTRY["assistant"]["dadm-openai-assistant"]["endpoint"] = openai_service_url

# Try to load the assistant ID from the assistant_id.json file
assistant_id_file = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data", "assistant_id.json")
if os.path.exists(assistant_id_file):
    try:
        import json
        with open(assistant_id_file, 'r') as f:
            data = json.load(f)
            if data and "assistant_id" in data and data["assistant_id"]:
                SERVICE_REGISTRY["assistant"]["dadm-openai-assistant"]["assistant_id"] = data["assistant_id"]
                print(f"Loaded assistant ID from file: {data['assistant_id']}")
                # Force this ID to be used consistently throughout the application
                os.environ["OPENAI_ASSISTANT_ID"] = data["assistant_id"]
    except Exception as e:
        print(f"Error loading assistant ID from file: {e}")

# For Docker environments, use container name
# The orchestrator will automatically use this in containerized environments
DOCKER_SERVICE_REGISTRY = {
    "assistant": {
        "dadm-openai-assistant": {
            "endpoint": "http://openai-service:5000",
            "description": "OpenAI Assistant for processing decision tasks"
        }
    }
}

# Detect if running in Docker environment
# We'll check for the DOCKER_CONTAINER environment variable or another approach
IN_DOCKER = os.environ.get("DOCKER_CONTAINER", "false").lower() == "true"

# Check if we should use Consul for service discovery
USE_CONSUL = os.environ.get("USE_CONSUL", "true").lower() == "true"

# Function to get the appropriate service registry based on environment
def get_service_registry():
    """
    Get the appropriate service registry based on the execution environment
    
    Returns:
        dict: Service registry configuration
    """
    if USE_CONSUL:
        # Try to get registry from Consul
        try:
            from src.consul_discovery import ConsulDiscovery
            consul_discovery = ConsulDiscovery()
            if consul_discovery.is_consul_available():
                consul_registry = consul_discovery.build_service_registry()
                if consul_registry:
                    print(f"Using service registry from Consul with {sum(len(svc) for svc in consul_registry.values())} services")
                    return consul_registry
        except ImportError:
            print("Consul discovery module not available")
        except Exception as e:
            print(f"Error getting service registry from Consul: {e}")
    
    # Fall back to static registry if Consul is not available or disabled
    if IN_DOCKER:
        return DOCKER_SERVICE_REGISTRY
    return SERVICE_REGISTRY

def update_assistant_id(assistant_id):
    """
    Update the assistant ID in the service registry
    
    Args:
        assistant_id: The new assistant ID to use
        
    Returns:
        bool: True if successful, False otherwise
    """
    if not assistant_id:
        return False
        
    try:
        current_id = SERVICE_REGISTRY["assistant"]["dadm-openai-assistant"].get("assistant_id")
        
        if current_id == assistant_id:
            return True
            
        SERVICE_REGISTRY["assistant"]["dadm-openai-assistant"]["assistant_id"] = assistant_id
        
        # Also update environment variable for consistency
        os.environ["OPENAI_ASSISTANT_ID"] = assistant_id
        
        # Propagate to Docker registry if needed
        if "assistant" in DOCKER_SERVICE_REGISTRY and "dadm-openai-assistant" in DOCKER_SERVICE_REGISTRY["assistant"]:
            DOCKER_SERVICE_REGISTRY["assistant"]["dadm-openai-assistant"]["assistant_id"] = assistant_id
        
        # Try to update the service metadata in Consul if available
        if USE_CONSUL:
            try:
                import requests
                consul_url = os.environ.get("CONSUL_HTTP_ADDR", "http://localhost:8500")
                if not consul_url.startswith("http"):
                    if ":" in consul_url:
                        consul_url = f"http://{consul_url}"
                    else:
                        consul_url = f"http://{consul_url}:8500"
                
                service_name = "dadm-openai-assistant"  # Use the configured service name
                
                # Get current service definition
                response = requests.get(f"{consul_url}/v1/agent/service/{service_name}", timeout=5)
                if response.status_code == 200:
                    service_def = response.json()
                    
                    # Update the metadata
                    if "Meta" in service_def:
                        service_def["Meta"]["assistant_id"] = assistant_id
                        
                        # Re-register the service with updated metadata
                        deregister_response = requests.put(
                            f"{consul_url}/v1/agent/service/deregister/{service_name}",
                            timeout=5
                        )
                        
                        register_response = requests.put(
                            f"{consul_url}/v1/agent/service/register",
                            json=service_def,
                            timeout=5
                        )
                        
                        if register_response.status_code == 200:
                            print(f"Updated assistant_id in Consul metadata for service: {service_name}")
            except ImportError:
                print("Requests module not available for updating Consul metadata")
            except Exception as e:
                print(f"Error updating assistant ID in Consul: {e}")
            
        return True
    except Exception as e:
        print(f"Error updating assistant ID in service registry: {e}")
        return False

"""
Service Registry Configuration

This file contains the registry of external services that the DADM application
can use for processing tasks. Each service entry includes the endpoint and any
configuration settings needed to connect to the service.
"""

# Main service registry
SERVICE_REGISTRY = {
    # Assistant services (OpenAI, Azure, etc.)
    "assistant": {
        "dadm-openai-assistant": {
            "endpoint": "http://localhost:5000",
            "description": "OpenAI Assistant service for decision processing",
            "active": True
        }
    },
    
    # Test services (for demonstration and testing)
    "test": {
        "echo": {
            "endpoint": "http://localhost:5100",
            "description": "Echo test service for demonstration",
            "active": True
        }
    }
}

# Default service type and name to use if not specified
DEFAULT_SERVICE_TYPE = "assistant"
DEFAULT_SERVICE_NAME = "dadm-openai-assistant"

# Service connection parameters
CONNECTION_TIMEOUT = 10  # Connection timeout in seconds
MAX_RETRIES = 3          # Maximum number of connection retry attempts
RETRY_DELAY = 2          # Delay between retry attempts in seconds
