version: '3.8'

services:
  # Consul Service Registry
  consul:
    image: consul:1.15
    container_name: dadm-consul
    ports:
      - "8500:8500"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    networks:
      - dadm-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 5  # PostgreSQL Database for Camunda
  postgres:
    image: postgres:15
    container_name: dadm-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=camunda
      - POSTGRES_USER=camunda
      - POSTGRES_PASSWORD=camunda
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_INITDB_ARGS=--auth-host=md5 --auth-local=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dadm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U camunda"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  # Camunda BPM Platform
  camunda:
    build:
      context: .
      dockerfile: Dockerfile.camunda
    container_name: dadm-camunda
    ports:
      - "8080:8080"
    environment:
      - DB_DRIVER=org.postgresql.Driver
      - DB_URL=jdbc:postgresql://postgres:5432/camunda
      - DB_USERNAME=camunda
      - DB_PASSWORD=camunda
      - WAIT_FOR=postgres:5432
    networks:
      - dadm-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/engine-rest/engine"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 60s
  
  # OpenAI Assistant Service
  openai-service:
    build:
      context: ..
      dockerfile: services/openai_service/Dockerfile
    container_name: openai-service
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ASSISTANT_NAME=${ASSISTANT_NAME:-DADM Decision Analysis Assistant}
      - ASSISTANT_MODEL=${ASSISTANT_MODEL:-gpt-4o}
      - CONSUL_HTTP_ADDR=consul:8500
      - SERVICE_HOST=openai-service
      - SERVICE_TYPE=assistant
      - USE_CONSUL=true
      - DOCKER_CONTAINER=true      # Database configuration
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - ENABLE_QDRANT=true
      - ENABLE_NEO4J=true
      - DB_RETRY_ATTEMPTS=5
      - DB_RETRY_DELAY=5
    volumes:
      - ../config:/app/config
      - ../services/openai_service/data:/app/services/openai_service/data
    restart: unless-stopped
    networks:
      - dadm-network
    depends_on:
      - camunda
      - consul
      - qdrant
      - neo4j
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Echo Test Service
  echo-service:
    build:
      context: ..
      dockerfile: services/echo_service/Dockerfile
    container_name: echo-service
    ports:
      - "5100:5100"
    environment:
      - PORT=5100
      - CONSUL_HTTP_ADDR=consul:8500
      - SERVICE_HOST=echo-service
      - SERVICE_TYPE=utility
      - USE_CONSUL=true
      - DOCKER_CONTAINER=true
    restart: unless-stopped
    networks:
      - dadm-network
    depends_on:
      - camunda
      - consul
      - openai-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5100/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
      
  # Service Monitor
  service-monitor:
    build:
      context: ..
      dockerfile: services/monitor/Dockerfile
    container_name: service-monitor
    ports:
      - "5200:5200"
    environment:
      - CHECK_INTERVAL=60
      - CONSUL_HTTP_ADDR=consul:8500
      - SERVICE_HOST=service-monitor
      - SERVICE_TYPE=monitor
      - USE_CONSUL=true
      - DOCKER_CONTAINER=true
      - PORT=5200
    volumes:
      - ../config:/app/config
      - ../logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock    
    # Allow Docker commands
    restart: unless-stopped
    networks:
      - dadm-network
    depends_on:
      - openai-service
      - echo-service
      - consul
    command: sh -c "python scripts/service_monitor.py --interval $${CHECK_INTERVAL:-60} --port 5200"
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:5200/health"]
        interval: 10s
        timeout: 5s
        retries: 3
        start_period: 30s

  # Qdrant Vector Database Service
  qdrant:
    image: qdrant/qdrant:v1.8.1
    container_name: dadm-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    restart: unless-stopped
    networks:
      - dadm-network
    # Qdrant Vector Database Service Healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/collections"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Neo4j Graph Database Service
  neo4j:
    image: neo4j:5.16.0
    container_name: dadm-neo4j
    ports:
      - "7474:7474"  # Web interface
      - "7687:7687"  # Bolt protocol
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/import
      - neo4j_plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_memory_pagecache_size=512M
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_server_default__listen__address=0.0.0.0
    restart: unless-stopped
    networks:
      - dadm-network
    healthcheck:  
      test: ["CMD", "wget", "-O", "/dev/null", "http://localhost:7474"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s


networks:
  dadm-network:
    driver: bridge

volumes:
  postgres_data:
  qdrant_storage:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
