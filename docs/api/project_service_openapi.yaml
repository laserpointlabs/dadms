openapi: 3.0.3
info:
  title: DADMS 2.0 - Project Service API
  description: |
    Project Service API for DADMS 2.0 - Decision Analysis and Decision Management System.
    
    This service provides project lifecycle management for decision intelligence workflows,
    including project creation, metadata management, status tracking, and user ownership.
    
    ## Current Implementation Status
    âœ… **IMPLEMENTED** - Core functionality operational with React UI integration
    
    ## Key Features
    - **Project CRUD Operations**: Complete lifecycle management
    - **PostgreSQL Integration**: Robust data persistence with proper schema
    - **React UI Integration**: Full frontend integration with real-time updates
    - **Input Validation**: Joi schema validation for all requests
    - **API Documentation**: Swagger/OpenAPI integration
    - **Error Handling**: Comprehensive error middleware

    ## Authentication
    Currently using simple user-id header authentication. JWT authentication planned for Phase 2.

  version: 2.0.0-alpha.2
  contact:
    name: DADMS Development Team
    email: dev@dadms.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001
    description: Local development server

components:
  schemas:
    # Core Project Models
    Project:
      type: object
      required: [id, name, description, owner_id, status, knowledge_domain, settings, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
          description: Unique project identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          maxLength: 255
          description: Project name/title
          example: "UAV Decision Analysis"
        description:
          type: string
          maxLength: 1000
          description: Project description
          example: "Analysis of UAV procurement options for defense applications"
        owner_id:
          type: string
          format: uuid
          description: Project owner user ID
          example: "0d6838ad-ae0e-4637-96cd-3c3271854da4"
        status:
          type: string
          enum: [active, completed]
          description: Current project status
          example: "active"
        knowledge_domain:
          type: string
          maxLength: 100
          description: Knowledge domain for the project
          example: "defense_analysis"
        settings:
          $ref: '#/components/schemas/ProjectSettings'
        decision_context:
          type: string
          maxLength: 2000
          nullable: true
          description: Rich decision context and background information
          example: "Analysis required for Q2 procurement decision with $50M budget"
        created_at:
          type: string
          format: date-time
          description: Project creation timestamp
          example: "2025-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-01-15T14:22:15Z"

    ProjectSettings:
      type: object
      required: [default_llm, personas, tools_enabled]
      properties:
        default_llm:
          type: string
          description: Default LLM provider for the project
          example: "openai/gpt-4"
        personas:
          type: array
          items:
            type: string
          description: Available agent personas for the project
          example: ["analyst", "subject_matter_expert"]
        tools_enabled:
          type: array
          items:
            type: string
          description: Enabled tools for the project
          example: ["rag_search", "web_search"]

    CreateProjectRequest:
      type: object
      required: [name, description, knowledge_domain]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Project name
          example: "UAV Decision Analysis"
        description:
          type: string
          maxLength: 1000
          description: Project description
          example: "Analysis of UAV procurement options for defense applications"
        knowledge_domain:
          type: string
          minLength: 1
          maxLength: 100
          description: Knowledge domain
          example: "defense_analysis"
        settings:
          $ref: '#/components/schemas/ProjectSettingsInput'
        decision_context:
          type: string
          maxLength: 2000
          description: Decision context and background
          example: "Analysis required for Q2 procurement decision with $50M budget"

    ProjectSettingsInput:
      type: object
      properties:
        default_llm:
          type: string
          description: Default LLM provider
          example: "openai/gpt-4"
        personas:
          type: array
          items:
            type: string
          description: Agent personas
          example: ["analyst"]
        tools_enabled:
          type: array
          items:
            type: string
          description: Enabled tools
          example: ["rag_search"]

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Project name
          example: "Updated UAV Analysis"
        description:
          type: string
          maxLength: 1000
          description: Project description
          example: "Updated analysis scope"
        knowledge_domain:
          type: string
          minLength: 1
          maxLength: 100
          description: Knowledge domain
          example: "defense_analysis"
        status:
          type: string
          enum: [active, completed]
          description: Project status
          example: "completed"
        settings:
          $ref: '#/components/schemas/ProjectSettingsInput'
        decision_context:
          type: string
          maxLength: 2000
          description: Decision context
          example: "Updated context information"

    ProjectListResponse:
      type: object
      required: [projects, total, page, limit]
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
          description: Array of projects
        total:
          type: integer
          minimum: 0
          description: Total number of projects
          example: 25
        page:
          type: integer
          minimum: 1
          description: Current page number
          example: 1
        limit:
          type: integer
          minimum: 1
          maximum: 50
          description: Number of projects per page
          example: 10

    # Standard Response Models
    ApiResponse:
      type: object
      required: [success, timestamp]
      properties:
        success:
          type: boolean
          description: Request success status
          example: true
        data:
          description: Response data (varies by endpoint)
        error:
          type: string
          description: Error message if success is false
          example: "Validation failed"
        message:
          type: string
          description: Additional message
          example: "Project created successfully"
        timestamp:
          type: string
          format: date-time
          description: Response timestamp
          example: "2025-01-15T10:30:00Z"

    ErrorResponse:
      type: object
      required: [success, error, timestamp]
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
          example: "Project not found"
        message:
          type: string
          description: Additional error context
          example: "The requested project does not exist or you don't have access"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00Z"

    HealthResponse:
      type: object
      required: [status, service, timestamp, port]
      properties:
        status:
          type: string
          enum: [healthy]
          example: "healthy"
        service:
          type: string
          example: "user-project-service"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00Z"
        port:
          type: integer
          example: 3001

    ServiceInfo:
      type: object
      required: [service, version, endpoints, timestamp]
      properties:
        service:
          type: string
          example: "DADMS User & Project Service"
        version:
          type: string
          example: "1.0.0"
        endpoints:
          type: object
          properties:
            projects:
              type: string
              example: "/api/projects"
            health:
              type: string
              example: "/health"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00Z"

paths:
  # Health Check
  /health:
    get:
      summary: Service health check
      description: Returns the health status of the Project Service
      tags: [Health]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "healthy"
                service: "user-project-service"
                timestamp: "2025-01-15T10:30:00Z"
                port: 3001

  # Service Information
  /api:
    get:
      summary: Service information
      description: Returns basic service information and available endpoints
      tags: [Service Info]
      responses:
        '200':
          description: Service information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'

  # Project Management
  /api/projects:
    get:
      summary: List user's projects
      description: |
        Get a list of projects owned by the authenticated user with pagination support.
        
        **Default pagination**: page=1, limit=10  
        **Maximum limit**: 50 projects per page
      tags: [Projects]
      parameters:
        - in: header
          name: user-id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID for authentication
          example: "0d6838ad-ae0e-4637-96cd-3c3271854da4"
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Number of projects per page
          example: 10
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: object
                required: [success, data, timestamp]
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ProjectListResponse'
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-15T10:30:00Z"
        '400':
          description: Bad request - invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new project
      description: |
        Create a new project with the provided information. The project will be owned by the authenticated user.
        
        **Required fields**: name, description, knowledge_domain  
        **Optional fields**: settings, decision_context
      tags: [Projects]
      parameters:
        - in: header
          name: user-id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID for authentication
          example: "0d6838ad-ae0e-4637-96cd-3c3271854da4"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
            example:
              name: "UAV Decision Analysis"
              description: "Analysis of UAV procurement options for defense applications"
              knowledge_domain: "defense_analysis"
              settings:
                default_llm: "openai/gpt-4"
                personas: ["analyst", "subject_matter_expert"]
                tools_enabled: ["rag_search", "web_search"]
              decision_context: "Analysis required for Q2 procurement decision with $50M budget"
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                type: object
                required: [success, data, message, timestamp]
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Project'
                  message:
                    type: string
                    example: "Project created successfully"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-15T10:30:00Z"
        '400':
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Validation failed: name is required"
                timestamp: "2025-01-15T10:30:00Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/projects/{id}:
    get:
      summary: Get project by ID
      description: |
        Retrieve a specific project by ID. The project must be owned by the authenticated user.
      tags: [Projects]
      parameters:
        - in: header
          name: user-id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID for authentication
          example: "0d6838ad-ae0e-4637-96cd-3c3271854da4"
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Project ID
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                type: object
                required: [success, data, timestamp]
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Project'
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-15T10:30:00Z"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Project not found"
                message: "The requested project does not exist or you don't have access"
                timestamp: "2025-01-15T10:30:00Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update project by ID
      description: |
        Update an existing project. Only the project owner can update the project.
        All fields are optional - only provided fields will be updated.
      tags: [Projects]
      parameters:
        - in: header
          name: user-id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID for authentication
          example: "0d6838ad-ae0e-4637-96cd-3c3271854da4"
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Project ID
          example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
            example:
              name: "Updated UAV Analysis"
              description: "Updated analysis with expanded scope"
              status: "completed"
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                type: object
                required: [success, data, message, timestamp]
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Project'
                  message:
                    type: string
                    example: "Project updated successfully"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-15T10:30:00Z"
        '400':
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete project by ID
      description: |
        Delete a project permanently. Only the project owner can delete the project.
        **Warning**: This action cannot be undone.
      tags: [Projects]
      parameters:
        - in: header
          name: user-id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID for authentication
          example: "0d6838ad-ae0e-4637-96cd-3c3271854da4"
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Project ID
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                type: object
                required: [success, message, timestamp]
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Project deleted successfully"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-15T10:30:00Z"
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Health
    description: Service health and status endpoints
  - name: Service Info
    description: Service information and metadata
  - name: Projects
    description: Project lifecycle management operations

# Current authentication uses simple user-id header
# Future versions will implement JWT authentication
security: [] 