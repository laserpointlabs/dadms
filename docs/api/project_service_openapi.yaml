openapi: 3.0.3
info:
  title: DADMS Project Service API
  version: 1.0.0
  description: |
    OpenAPI specification for the DADMS 2.0 Project Service. Defines endpoints for project management, 
    user assignment, lifecycle management, and integration with other DADMS services. Supports 
    decision intelligence workflows with rich project context and analytics.

servers:
  - url: http://localhost:3001
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Core Project Models
    Project:
      type: object
      properties:
        id:
          type: string
          description: Unique project identifier
        name:
          type: string
          description: Project name/title
        description:
          type: string
          description: Project description
        decision_context:
          type: string
          description: Rich decision context and metadata
        status:
          type: string
          enum: [draft, active, completed, archived, suspended]
          description: Current project status
        priority:
          type: string
          enum: [low, medium, high, critical]
          default: medium
          description: Project priority level
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        owner_id:
          type: string
          description: Project owner user ID
        users:
          type: array
          items:
            $ref: '#/components/schemas/ProjectUser'
        metadata:
          type: object
          description: Additional project metadata
        tags:
          type: array
          items:
            type: string
          description: Project tags for categorization
        template_id:
          type: string
          nullable: true
          description: Template used to create this project
        parent_project_id:
          type: string
          nullable: true
          description: Parent project if this is a sub-project

    ProjectCreate:
      type: object
      required: [name, owner_id]
      properties:
        name:
          type: string
        description:
          type: string
        decision_context:
          type: string
        owner_id:
          type: string
        priority:
          type: string
          enum: [low, medium, high, critical]
          default: medium
        tags:
          type: array
          items:
            type: string
        template_id:
          type: string
        parent_project_id:
          type: string
        metadata:
          type: object

    ProjectUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        decision_context:
          type: string
        status:
          type: string
          enum: [draft, active, completed, archived, suspended]
        priority:
          type: string
          enum: [low, medium, high, critical]
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object

    # User Management Models
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        avatar_url:
          type: string
          nullable: true

    ProjectUser:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        role:
          type: string
          enum: [owner, admin, member, viewer]
          default: member
        permissions:
          type: array
          items:
            type: string
            enum: [read, write, delete, manage_users, manage_settings]
        joined_at:
          type: string
          format: date-time
        last_active:
          type: string
          format: date-time
          nullable: true

    UserAssignment:
      type: object
      required: [user_ids]
      properties:
        user_ids:
          type: array
          items:
            type: string
        role:
          type: string
          enum: [admin, member, viewer]
          default: member
        permissions:
          type: array
          items:
            type: string
            enum: [read, write, delete, manage_users, manage_settings]

    # Project Templates
    ProjectTemplate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [decision_analysis, acquisition, planning, research, other]
        template_data:
          type: object
          description: Template configuration and defaults
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        usage_count:
          type: integer
        is_public:
          type: boolean
          default: false

    ProjectTemplateCreate:
      type: object
      required: [name, category]
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [decision_analysis, acquisition, planning, research, other]
        template_data:
          type: object
        is_public:
          type: boolean
          default: false

    # Analytics Models
    ProjectAnalytics:
      type: object
      properties:
        project_id:
          type: string
        summary:
          type: object
          properties:
            total_users:
              type: integer
            active_users:
              type: integer
            total_processes:
              type: integer
            completed_processes:
              type: integer
            total_documents:
              type: integer
            average_completion_time:
              type: number
              format: float
        user_activity:
          type: array
          items:
            $ref: '#/components/schemas/UserActivity'
        process_metrics:
          type: array
          items:
            $ref: '#/components/schemas/ProcessMetric'
        timeline:
          type: array
          items:
            $ref: '#/components/schemas/TimelineEvent'

    UserActivity:
      type: object
      properties:
        user_id:
          type: string
        user_name:
          type: string
        activity_type:
          type: string
          enum: [login, document_upload, process_start, process_complete, comment]
        timestamp:
          type: string
          format: date-time
        details:
          type: object

    ProcessMetric:
      type: object
      properties:
        process_id:
          type: string
        process_name:
          type: string
        status:
          type: string
        start_time:
          type: string
          format: date-time
        completion_time:
          type: string
          format: date-time
          nullable: true
        duration:
          type: integer
          nullable: true

    TimelineEvent:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        event_type:
          type: string
          enum: [created, started, user_joined, process_started, process_completed, document_added]
        description:
          type: string
        user_id:
          type: string
          nullable: true
        metadata:
          type: object

    # Search and Filter Models
    ProjectSearch:
      type: object
      properties:
        query:
          type: string
          description: Search query for project name/description
        status:
          type: array
          items:
            type: string
            enum: [draft, active, completed, archived, suspended]
        priority:
          type: array
          items:
            type: string
            enum: [low, medium, high, critical]
        owner_id:
          type: string
        tags:
          type: array
          items:
            type: string
        created_after:
          type: string
          format: date-time
        created_before:
          type: string
          format: date-time
        limit:
          type: integer
          default: 20
        offset:
          type: integer
          default: 0
        sort_by:
          type: string
          enum: [created_at, updated_at, name, priority, status]
          default: updated_at
        sort_order:
          type: string
          enum: [asc, desc]
          default: desc

    # Integration Models
    ProjectIntegration:
      type: object
      properties:
        knowledge_documents:
          type: integer
          description: Number of documents in Knowledge Service
        active_processes:
          type: integer
          description: Number of active processes in Thread Manager
        llm_interactions:
          type: integer
          description: Number of LLM interactions
        last_event:
          type: string
          format: date-time
          nullable: true

    # Standard Response Models
    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: string

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, degraded]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        dependencies:
          type: object
          additionalProperties:
            type: string

security:
  - bearerAuth: []

paths:
  # Health Check
  /health:
    get:
      summary: Service health/readiness check
      description: Returns service health status, uptime, version, and integration status.
      tags: [Health]
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  uptime:
                    type: integer
                  version:
                    type: string
                  integrations:
                    type: object
                    properties:
                      knowledge_service:
                        type: string
                      thread_manager:
                        type: string
                      event_bus:
                        type: string

  # Project Management
  /projects:
    get:
      summary: Search and list projects
      description: Search projects with advanced filtering, sorting, and pagination.
      tags: [Projects]
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Search query for project name/description
        - in: query
          name: status
          schema:
            type: array
            items:
              type: string
              enum: [draft, active, completed, archived, suspended]
          style: form
          explode: false
          description: Filter by project status
        - in: query
          name: priority
          schema:
            type: array
            items:
              type: string
              enum: [low, medium, high, critical]
          style: form
          explode: false
          description: Filter by priority
        - in: query
          name: owner_id
          schema:
            type: string
          description: Filter by project owner
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          description: Filter by tags
        - in: query
          name: created_after
          schema:
            type: string
            format: date-time
          description: Filter projects created after date
        - in: query
          name: created_before
          schema:
            type: string
            format: date-time
          description: Filter projects created before date
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of results to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of results to skip
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [created_at, updated_at, name, priority, status]
            default: updated_at
          description: Sort field
        - in: query
          name: sort_order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new project
      description: Create a new project with optional template and metadata.
      tags: [Projects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{id}:
    get:
      summary: Get project by ID
      description: Get detailed project information including users and integration status.
      tags: [Projects]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Project'
                  - type: object
                    properties:
                      integration:
                        $ref: '#/components/schemas/ProjectIntegration'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update project by ID
      tags: [Projects]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete project by ID
      tags: [Projects]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Project deleted
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{id}/clone:
    post:
      summary: Clone project
      description: Create a copy of an existing project with new name and owner.
      tags: [Projects]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, owner_id]
              properties:
                name:
                  type: string
                description:
                  type: string
                owner_id:
                  type: string
                include_users:
                  type: boolean
                  default: false
                include_documents:
                  type: boolean
                  default: false
      responses:
        '201':
          description: Project cloned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /projects/{id}/status:
    put:
      summary: Update project status
      description: Update project status with optional transition notes.
      tags: [Projects]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [draft, active, completed, archived, suspended]
                notes:
                  type: string
      responses:
        '200':
          description: Project status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  # User Management
  /projects/{id}/users:
    get:
      summary: List users assigned to a project
      description: Get all users assigned to the project with their roles and permissions.
      tags: [Project Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of project users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectUser'

    post:
      summary: Assign user(s) to a project
      description: Assign one or more users to a project with specific roles and permissions.
      tags: [Project Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAssignment'
      responses:
        '200':
          description: Users assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  assigned_users:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectUser'
                  errors:
                    type: array
                    items:
                      type: object

  /projects/{id}/users/{userId}:
    get:
      summary: Get user details in project
      description: Get detailed information about a specific user in the project.
      tags: [Project Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'

    put:
      summary: Update user role and permissions
      description: Update a user's role and permissions within the project.
      tags: [Project Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [owner, admin, member, viewer]
                permissions:
                  type: array
                  items:
                    type: string
                    enum: [read, write, delete, manage_users, manage_settings]
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'

    delete:
      summary: Remove user from project
      tags: [Project Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User removed

  # Project Templates
  /templates:
    get:
      summary: List project templates
      description: Get available project templates for creating new projects.
      tags: [Templates]
      parameters:
        - in: query
          name: category
          schema:
            type: string
            enum: [decision_analysis, acquisition, planning, research, other]
          description: Filter by template category
        - in: query
          name: is_public
          schema:
            type: boolean
          description: Filter by public/private templates
      responses:
        '200':
          description: List of templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectTemplate'

    post:
      summary: Create a new template
      tags: [Templates]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectTemplateCreate'
      responses:
        '201':
          description: Template created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTemplate'

  /templates/{id}:
    get:
      summary: Get template by ID
      tags: [Templates]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Template details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTemplate'

    put:
      summary: Update template by ID
      tags: [Templates]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectTemplateCreate'
      responses:
        '200':
          description: Template updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTemplate'

    delete:
      summary: Delete template by ID
      tags: [Templates]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Template deleted

  # Analytics
  /projects/{id}/analytics:
    get:
      summary: Get project analytics
      description: Get comprehensive analytics and metrics for a project.
      tags: [Analytics]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
          description: Start date for analytics
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
          description: End date for analytics
      responses:
        '200':
          description: Project analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAnalytics'

  /analytics/projects:
    get:
      summary: Get projects analytics
      description: Get analytics across all projects.
      tags: [Analytics]
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date-time
        - in: query
          name: end_date
          schema:
            type: string
            format: date-time
        - in: query
          name: owner_id
          schema:
            type: string
      responses:
        '200':
          description: Projects analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: object
                    properties:
                      total_projects:
                        type: integer
                      active_projects:
                        type: integer
                      completed_projects:
                        type: integer
                      average_completion_time:
                        type: number
                        format: float
                  by_status:
                    type: array
                    items:
                      type: object
                      properties:
                        status:
                          type: string
                        count:
                          type: integer
                  by_priority:
                    type: array
                    items:
                      type: object
                      properties:
                        priority:
                          type: string
                        count:
                          type: integer

  # Bulk Operations
  /bulk/projects:
    post:
      summary: Bulk update projects
      description: Update multiple projects in a single request.
      tags: [Bulk Operations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [project_ids, updates]
              properties:
                project_ids:
                  type: array
                  items:
                    type: string
                updates:
                  $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Projects updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated_count:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: object

  /bulk/users:
    post:
      summary: Bulk assign users
      description: Assign users to multiple projects in a single request.
      tags: [Bulk Operations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [project_ids, user_ids]
              properties:
                project_ids:
                  type: array
                  items:
                    type: string
                user_ids:
                  type: array
                  items:
                    type: string
                role:
                  type: string
                  enum: [admin, member, viewer]
                  default: member
      responses:
        '200':
          description: Users assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  assigned_count:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: object 