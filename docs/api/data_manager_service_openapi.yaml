openapi: 3.0.3
info:
  title: DADMS DataManager Service API
  description: |
    DataManager Service API for DADMS 2.0 - Central data gateway and processing hub with comprehensive units management
    
    The DataManager enables seamless integration of diverse data sources with intelligent 
    transformation, validation, and real-time streaming capabilities. It serves as the 
    primary gateway for external data integration into the DADMS ecosystem.
    
    **Key Features:**
    - Multi-source data ingestion (databases, APIs, webhooks, files)
    - Schema validation and data normalization
    - **Comprehensive units management and dimensional analysis**
    - **Automated unit detection and conversion capabilities**
    - **Unit validation and consistency checking**
    - Real-time streaming and batch processing
    - Ontology tagging and metadata enrichment
    - Data quality monitoring and lineage tracking
    - Event-driven integration with DADMS services
    
  version: "1.0.0"
  contact:
    name: DADMS Development Team
    email: dev@dadms.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3009
    description: Local development
  - url: https://api.dadms.dev/data-manager
    description: Development environment
  - url: https://api.dadms.com/data-manager
    description: Production environment

security:
  - BearerAuth: []

paths:
  # Data Ingestion Endpoints
  /data/ingest:
    post:
      tags:
        - Data Ingestion
      summary: Ingest single data record
      description: Ingest a single data record from any configured source
      operationId: ingestData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataIngestRequest'
            examples:
              customer_record:
                summary: Customer data record
                value:
                  source_id: "external-db-prod"
                  external_id: "customer-12345"
                  data_type: "structured"
                  content:
                    customer_id: "12345"
                    name: "John Doe"
                    email: "john.doe@example.com"
                    status: "active"
                  metadata:
                    projectId: "proj-uuid"
                    domain: "customer_management"
                    tags: ["customer", "crm"]
                    sensitivity_level: "internal"
                  source_timestamp: "2025-01-15T10:30:00Z"
      responses:
        '201':
          description: Data record successfully ingested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataIngestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'

  /data/ingest/batch:
    post:
      tags:
        - Data Ingestion
      summary: Ingest multiple data records
      description: Ingest multiple data records in a single batch operation
      operationId: batchIngestData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchIngestRequest'
      responses:
        '201':
          description: Batch ingestion completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchIngestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'

  # Data Querying Endpoints
  /data/query:
    get:
      tags:
        - Data Querying
      summary: Query data records
      description: Query data records with comprehensive filtering options
      operationId: queryData
      parameters:
        - name: source_ids
          in: query
          description: Filter by data source IDs
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: project_id
          in: query
          description: Filter by DADMS project ID
          required: false
          schema:
            type: string
            format: uuid
        - name: data_types
          in: query
          description: Filter by data types
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DataType'
        - name: tags
          in: query
          description: Filter by metadata tags
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: start_time
          in: query
          description: Start of time range (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: End of time range (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
        - name: time_field
          in: query
          description: Time field to filter on
          required: false
          schema:
            type: string
            enum: [ingestion_timestamp, source_timestamp]
            default: ingestion_timestamp
        - name: limit
          in: query
          description: Maximum records to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          description: Number of records to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: sort_by
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            default: ingestion_timestamp
        - name: sort_order
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Query results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataQueryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /data/stream:
    get:
      tags:
        - Data Streaming
      summary: Real-time data streaming
      description: WebSocket endpoint for real-time data streaming
      operationId: streamData
      parameters:
        - name: source_ids
          in: query
          description: Filter by data source IDs
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: data_types
          in: query
          description: Filter by data types
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DataType'
        - name: tags
          in: query
          description: Filter by metadata tags
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: projects
          in: query
          description: Filter by project IDs
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        '101':
          description: WebSocket connection established
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Data Source Management Endpoints
  /sources:
    post:
      tags:
        - Data Sources
      summary: Register new data source
      description: Register a new data source for ingestion
      operationId: createDataSource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSourceConfig'
            examples:
              database_source:
                summary: Database data source
                value:
                  name: "Production Customer Database"
                  type: "database"
                  connection_config:
                    host: "db.example.com"
                    port: 5432
                    database: "customers"
                    username: "readonly_user"
                    password: "encrypted_password"
                    ssl: true
                  schema_config:
                    expected_tables: ["customers", "orders"]
                    schema_validation: "strict"
                  ingestion_config:
                    mode: "realtime"
                    batch_size: 1000
                    sync_frequency: "5m"
                    change_detection: "timestamp"
                  metadata_mapping:
                    domain: "customer_management"
                    default_tags: ["crm", "production"]
                    field_mappings:
                      customer_id: "entity.customer.id"
                      email: "contact.email"
      responses:
        '201':
          description: Data source created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      tags:
        - Data Sources
      summary: List data sources
      description: List all registered data sources
      operationId: listDataSources
      parameters:
        - name: type
          in: query
          description: Filter by data source type
          required: false
          schema:
            $ref: '#/components/schemas/DataSourceType'
        - name: enabled
          in: query
          description: Filter by enabled status
          required: false
          schema:
            type: boolean
        - name: health_status
          in: query
          description: Filter by health status
          required: false
          schema:
            $ref: '#/components/schemas/HealthStatus'
      responses:
        '200':
          description: List of data sources
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataSource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /sources/{id}:
    get:
      tags:
        - Data Sources
      summary: Get specific data source
      description: Get details of a specific data source
      operationId: getDataSource
      parameters:
        - name: id
          in: path
          required: true
          description: Data source ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Data source details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSourceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    put:
      tags:
        - Data Sources
      summary: Update data source
      description: Update data source configuration
      operationId: updateDataSource
      parameters:
        - name: id
          in: path
          required: true
          description: Data source ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSourceConfig'
      responses:
        '200':
          description: Data source updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      tags:
        - Data Sources
      summary: Delete data source
      description: Delete a data source and stop all ingestion
      operationId: deleteDataSource
      parameters:
        - name: id
          in: path
          required: true
          description: Data source ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Data source deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /sources/{id}/test:
    post:
      tags:
        - Data Sources
      summary: Test data source connection
      description: Test connection to a data source
      operationId: testDataSource
      parameters:
        - name: id
          in: path
          required: true
          description: Data source ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Connection test results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionTestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Schema Management Endpoints
  /schemas:
    post:
      tags:
        - Schema Management
      summary: Register data schema
      description: Register a data schema for validation
      operationId: createSchema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaDefinition'
      responses:
        '201':
          description: Schema registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      tags:
        - Schema Management
      summary: List registered schemas
      description: List all registered data schemas
      operationId: listSchemas
      parameters:
        - name: domain
          in: query
          description: Filter by domain
          required: false
          schema:
            type: string
        - name: version
          in: query
          description: Filter by version
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of schemas
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SchemaDefinition'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  # Data Validation Endpoints
  /data/{id}/validate:
    post:
      tags:
        - Data Validation
      summary: Validate data record
      description: Validate data record against registered schema
      operationId: validateData
      parameters:
        - name: id
          in: path
          required: true
          description: Data record ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationRequest'
      responses:
        '200':
          description: Validation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Data Lineage Endpoints
  /data/{id}/lineage:
    get:
      tags:
        - Data Lineage
      summary: Get data lineage
      description: Get complete data lineage for a record
      operationId: getDataLineage
      parameters:
        - name: id
          in: path
          required: true
          description: Data record ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Data lineage information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataLineageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Metadata Management Endpoints
  /data/{id}/metadata:
    put:
      tags:
        - Metadata Management
      summary: Update data metadata
      description: Update metadata for a data record
      operationId: updateDataMetadata
      parameters:
        - name: id
          in: path
          required: true
          description: Data record ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataUpdateRequest'
      responses:
        '200':
          description: Metadata updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataRecordResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Ontology Tagging Endpoints
  /data/{id}/tags:
    post:
      tags:
        - Ontology Tagging
      summary: Apply ontology tags
      description: Apply ontology tags to a data record
      operationId: applyOntologyTags
      parameters:
        - name: id
          in: path
          required: true
          description: Data record ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaggingRequest'
      responses:
        '200':
          description: Tags applied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaggingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Data Quality Endpoints
  /data/{id}/quality:
    get:
      tags:
        - Data Quality
      summary: Assess data quality
      description: Assess data quality for a record
      operationId: assessDataQuality
      parameters:
        - name: id
          in: path
          required: true
          description: Data record ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Data quality assessment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QualityAssessmentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # External Integration Endpoints
  /external/webhooks/{source_id}:
    post:
      tags:
        - External Integration
      summary: External webhook endpoint
      description: Receive data from external systems via webhook
      operationId: receiveWebhook
      security: []  # No auth required, uses webhook secrets
      parameters:
        - name: source_id
          in: path
          required: true
          description: External data source ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              description: Variable format depending on external system
            examples:
              database_change:
                summary: Database change event
                value:
                  event_type: "record_updated"
                  table: "customers"
                  record_id: "12345"
                  timestamp: "2025-01-15T10:30:00Z"
                  changes:
                    status:
                      from: "active"
                      to: "inactive"
      responses:
        '200':
          description: Webhook received successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Webhook authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalError'

  # Health and Monitoring Endpoints
  /health:
    get:
      tags:
        - Health & Monitoring
      summary: Service health check
      description: Get service health status
      operationId: getHealth
      security: []  # No auth required for health checks
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /metrics:
    get:
      tags:
        - Health & Monitoring
      summary: Service metrics
      description: Get service performance metrics
      operationId: getMetrics
      responses:
        '200':
          description: Service metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  # Units Management Endpoints
  /units:
    get:
      tags:
        - Units Management
      summary: List units
      description: Get a list of all available units with optional filtering
      operationId: listUnits
      parameters:
        - name: unit_system
          in: query
          schema:
            $ref: '#/components/schemas/UnitSystem'
          description: Filter by unit system
        - name: category
          in: query
          schema:
            $ref: '#/components/schemas/UnitCategory'
          description: Filter by unit category
        - name: search
          in: query
          schema:
            type: string
          description: Search units by name, symbol, or alias
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of results per page
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of results to skip
      responses:
        '200':
          description: Units retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  units:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitDefinition'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      tags:
        - Units Management
      summary: Register new unit
      description: Register a new unit definition in the system
      operationId: registerUnit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitDefinition'
            example:
              id: "nautical_mile"
              symbol: "nmi"
              name: "Nautical Mile"
              aliases: ["nm", "M"]
              unit_system: "marine"
              base_unit: "meter"
              conversion_factor: 1852.0
              dimension:
                length: 1
                mass: 0
                time: 0
                electric_current: 0
                temperature: 0
                amount_of_substance: 0
                luminous_intensity: 0
              category: "length"
              is_base_unit: false
              is_derived: false
              standards_compliance: ["IHO", "IMO"]
              description: "International nautical mile defined as exactly 1852 meters"
      responses:
        '201':
          description: Unit registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDefinition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Unit already exists
        '500':
          $ref: '#/components/responses/InternalError'

  /units/{unitId}:
    get:
      tags:
        - Units Management
      summary: Get unit details
      description: Get detailed information about a specific unit
      operationId: getUnit
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: string
          description: Unit identifier
      responses:
        '200':
          description: Unit details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDefinition'
        '404':
          description: Unit not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

    put:
      tags:
        - Units Management
      summary: Update unit
      description: Update an existing unit definition
      operationId: updateUnit
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: string
          description: Unit identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitDefinition'
      responses:
        '200':
          description: Unit updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDefinition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Unit not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      tags:
        - Units Management
      summary: Delete unit
      description: Delete a unit definition from the system
      operationId: deleteUnit
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: string
          description: Unit identifier
      responses:
        '204':
          description: Unit deleted successfully
        '404':
          description: Unit not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Unit is in use and cannot be deleted
        '500':
          $ref: '#/components/responses/InternalError'

  /units/search:
    get:
      tags:
        - Units Management
      summary: Search units
      description: Search units using text query with fuzzy matching
      operationId: searchUnits
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: include_aliases
          in: query
          schema:
            type: boolean
            default: true
          description: Include unit aliases in search
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Maximum number of results
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/UnitDefinition'
                    - type: object
                      properties:
                        relevance_score:
                          type: number
                          minimum: 0
                          maximum: 1
                        matched_fields:
                          type: array
                          items:
                            type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  # Unit Collections
  /units/collections:
    get:
      tags:
        - Unit Collections
      summary: List unit collections
      description: Get all available unit collections
      operationId: listUnitCollections
      responses:
        '200':
          description: Collections retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitCollection'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      tags:
        - Unit Collections
      summary: Create unit collection
      description: Create a new unit collection
      operationId: createUnitCollection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitCollection'
            example:
              id: "aerospace_units"
              name: "Aerospace Engineering Units"
              description: "Standard units used in aerospace engineering applications"
              unit_system: "si"
              units: ["meter", "kilogram", "second", "newton", "pascal", "kelvin"]
              is_complete: false
              is_coherent: true
              authority: "AIAA"
              version: "1.0"
              effective_date: "2024-01-01T00:00:00Z"
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitCollection'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Collection already exists
        '500':
          $ref: '#/components/responses/InternalError'

  /units/collections/{collectionId}:
    get:
      tags:
        - Unit Collections
      summary: Get unit collection
      description: Get details of a specific unit collection
      operationId: getUnitCollection
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
          description: Collection identifier
      responses:
        '200':
          description: Collection details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitCollection'
        '404':
          description: Collection not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  # Unit Validation & Conversion
  /units/validate:
    post:
      tags:
        - Unit Validation
      summary: Validate data units
      description: Validate units in data against schema requirements
      operationId: validateUnits
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  additionalProperties: true
                  description: Data to validate
                schema:
                  $ref: '#/components/schemas/UnitAwareSchema'
                validation_level:
                  $ref: '#/components/schemas/UnitValidationLevel'
              required:
                - data
                - schema
            example:
              data:
                altitude: 10000
                speed: 250
                temperature: -40
              schema:
                properties:
                  altitude:
                    type: "number"
                    unit:
                      required_unit: "meter"
                      validation_level: "strict"
                  speed:
                    type: "number"
                    unit:
                      allowed_units: ["meter_per_second", "knot", "kilometer_per_hour"]
                      conversion_target: "meter_per_second"
                      validation_level: "convertible"
                  temperature:
                    type: "number"
                    unit:
                      dimension:
                        temperature: 1
                      validation_level: "dimensional"
      responses:
        '200':
          description: Validation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitValidationResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /units/convert:
    post:
      tags:
        - Unit Conversion
      summary: Convert unit values
      description: Convert numeric values between different units
      operationId: convertUnits
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  oneOf:
                    - type: number
                    - type: array
                      items:
                        type: number
                  description: Value(s) to convert
                from_unit:
                  type: string
                  description: Source unit identifier
                to_unit:
                  type: string
                  description: Target unit identifier
                precision:
                  type: integer
                  minimum: 0
                  maximum: 15
                  description: Decimal precision for result
              required:
                - value
                - from_unit
                - to_unit
            example:
              value: 100
              from_unit: "kilometer_per_hour"
              to_unit: "meter_per_second"
              precision: 2
      responses:
        '200':
          description: Conversion completed successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ConversionResult'
                  - type: array
                    items:
                      $ref: '#/components/schemas/ConversionResult'
        '400':
          description: Invalid conversion request or incompatible units
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /units/convert/record:
    post:
      tags:
        - Unit Conversion
      summary: Convert data record units
      description: Convert units across multiple fields in a data record
      operationId: convertRecord
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                record:
                  $ref: '#/components/schemas/DataRecord'
                conversion_map:
                  type: object
                  additionalProperties:
                    type: string
                  description: Field to target unit mapping
                preserve_original:
                  type: boolean
                  default: false
                  description: Whether to preserve original values
              required:
                - record
                - conversion_map
            example:
              record:
                id: "flight-data-001"
                content:
                  altitude: 35000
                  speed: 450
                  temperature: -60
              conversion_map:
                "content.altitude": "meter"
                "content.speed": "meter_per_second"
                "content.temperature": "kelvin"
              preserve_original: true
      responses:
        '200':
          description: Record converted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  converted_record:
                    $ref: '#/components/schemas/DataRecord'
                  conversion_summary:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConversionResult'
                  validation_issues:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  # Dimensional Analysis
  /units/analyze/dimensions:
    post:
      tags:
        - Dimensional Analysis
      summary: Analyze data dimensions
      description: Perform dimensional analysis on data to identify patterns and relationships
      operationId: analyzeDimensions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  additionalProperties: true
                  description: Data to analyze
                unit_metadata:
                  $ref: '#/components/schemas/UnitMetadata'
                analysis_options:
                  type: object
                  properties:
                    detect_relationships:
                      type: boolean
                      default: true
                    identify_patterns:
                      type: boolean
                      default: true
                    check_consistency:
                      type: boolean
                      default: true
              required:
                - data
            example:
              data:
                distance: 100
                time: 10
                speed: 10
                force: 500
                mass: 50
                acceleration: 10
              unit_metadata:
                field_units:
                  distance:
                    unit_id: "meter"
                    unit_symbol: "m"
                    confidence: 1.0
                  time:
                    unit_id: "second"
                    unit_symbol: "s"
                    confidence: 1.0
                  speed:
                    unit_id: "meter_per_second"
                    unit_symbol: "m/s"
                    confidence: 0.9
      responses:
        '200':
          description: Dimensional analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionalAnalysis'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /units/analyze/consistency:
    post:
      tags:
        - Dimensional Analysis
      summary: Check dimensional consistency
      description: Validate dimensional consistency across related fields
      operationId: validateDimensionalConsistency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  additionalProperties: true
                constraints:
                  type: array
                  items:
                    $ref: '#/components/schemas/DimensionalConstraint'
              required:
                - data
                - constraints
            example:
              data:
                force: 100
                mass: 10
                acceleration: 10
              constraints:
                - constraint_id: "newtons_second_law"
                  description: "Force equals mass times acceleration"
                  fields: ["force", "mass", "acceleration"]
                  constraint_type: "product"
                  constraint_formula: "force = mass * acceleration"
      responses:
        '200':
          description: Consistency check completed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DimensionalValidationResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  # Unit Intelligence
  /units/detect:
    post:
      tags:
        - Unit Intelligence
      summary: Detect units from data
      description: Automatically detect units from data patterns and context
      operationId: detectUnitsFromData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  additionalProperties: true
                  description: Data to analyze for unit detection
                context:
                  $ref: '#/components/schemas/DetectionContext'
                detection_options:
                  type: object
                  properties:
                    use_ml_inference:
                      type: boolean
                      default: true
                    confidence_threshold:
                      type: number
                      minimum: 0
                      maximum: 1
                      default: 0.7
                    max_candidates:
                      type: integer
                      minimum: 1
                      maximum: 10
                      default: 3
              required:
                - data
            example:
              data:
                flight_altitude_ft: 35000
                ground_speed_kts: 450
                outside_air_temp_f: -60
                fuel_remaining_lbs: 15000
              context:
                source_type: "aviation_data"
                domain: "flight_operations"
                file_extension: "csv"
                column_names: ["flight_altitude_ft", "ground_speed_kts", "outside_air_temp_f"]
      responses:
        '200':
          description: Unit detection completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDetectionResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /units/suggest:
    get:
      tags:
        - Unit Intelligence
      summary: Suggest units from context
      description: Get unit suggestions based on field name, data type, and domain
      operationId: suggestUnitsFromContext
      parameters:
        - name: field_name
          in: query
          required: true
          schema:
            type: string
          description: Field name to suggest units for
        - name: data_type
          in: query
          schema:
            type: string
            enum: [number, integer, float, string]
          description: Data type of the field
        - name: domain
          in: query
          schema:
            type: string
          description: Domain context (e.g., aviation, automotive, medical)
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 20
            default: 5
          description: Maximum number of suggestions
      responses:
        '200':
          description: Unit suggestions generated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitSuggestion'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /units/feedback:
    post:
      tags:
        - Unit Intelligence
      summary: Provide unit detection feedback
      description: Provide feedback to improve unit detection accuracy
      operationId: provideFeedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitFeedback'
            example:
              detection_id: "detection-uuid-123"
              field_path: "altitude"
              correct_unit: "meter"
              incorrect_detection: "foot"
              feedback_type: "correction"
              confidence: 0.95
              user_id: "user@example.com"
              timestamp: "2024-01-15T10:30:00Z"
      responses:
        '200':
          description: Feedback recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  feedback_id:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Core Data Models
    DataRecord:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique record identifier
        source_id:
          type: string
          description: Data source identifier
        external_id:
          type: string
          description: Original external identifier
          nullable: true
        data_type:
          $ref: '#/components/schemas/DataType'
        content:
          type: object
          additionalProperties: true
          description: Actual data content
        metadata:
          $ref: '#/components/schemas/DataMetadata'
        schema_version:
          type: string
          description: Data schema version
        ingestion_timestamp:
          type: string
          format: date-time
          description: When data was ingested
        source_timestamp:
          type: string
          format: date-time
          description: Original timestamp from source
          nullable: true
        hash:
          type: string
          description: Content hash for deduplication
        status:
          $ref: '#/components/schemas/DataStatus'
      required:
        - id
        - source_id
        - data_type
        - content
        - metadata
        - schema_version
        - ingestion_timestamp
        - hash
        - status

    DataType:
      type: string
      enum:
        - structured
        - unstructured
        - time_series
        - graph
        - document
        - media
      description: Type of data

    DataStatus:
      type: string
      enum:
        - ingesting
        - validated
        - transformed
        - indexed
        - failed
        - archived
      description: Processing status of data

    DataMetadata:
      type: object
      properties:
        projectId:
          type: string
          format: uuid
          description: Linked DADMS project
          nullable: true
        userId:
          type: string
          format: uuid
          description: User who ingested data
          nullable: true
        tags:
          type: array
          items:
            type: string
          description: Ontological and custom tags
        domain:
          type: string
          description: Knowledge domain
        source_config:
          type: object
          additionalProperties: true
          description: Source configuration
        lineage:
          $ref: '#/components/schemas/DataLineage'
        quality_score:
          type: number
          minimum: 0
          maximum: 1
          description: Data quality assessment
          nullable: true
        sensitivity_level:
          type: string
          enum: [public, internal, confidential, restricted]
          description: Data sensitivity classification
        retention_policy:
          type: string
          description: Retention policy identifier
          nullable: true
      required:
        - tags
        - domain
        - source_config
        - lineage
        - sensitivity_level

    DataLineage:
      type: object
      properties:
        source_path:
          type: string
          description: Original data path/location
        transformations:
          type: array
          items:
            $ref: '#/components/schemas/Transformation'
          description: Applied transformations
        parent_records:
          type: array
          items:
            type: string
            format: uuid
          description: Parent record IDs if derived
          nullable: true
        downstream_usage:
          type: array
          items:
            type: string
          description: Services/processes using this data
      required:
        - source_path
        - transformations
        - downstream_usage

    Transformation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Transformation identifier
        name:
          type: string
          description: Transformation name
        type:
          type: string
          enum: [filter, map, aggregate, join, normalize]
          description: Transformation type
        config:
          type: object
          additionalProperties: true
          description: Transformation configuration
        order:
          type: integer
          description: Execution order
        applied_at:
          type: string
          format: date-time
          description: When transformation was applied
      required:
        - id
        - name
        - type
        - config
        - order

    # Data Source Models
    DataSource:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique source identifier
        name:
          type: string
          description: Human-readable name
        type:
          $ref: '#/components/schemas/DataSourceType'
        connection_config:
          type: object
          additionalProperties: true
          description: Connection details (sensitive data excluded)
        schema_config:
          type: object
          additionalProperties: true
          description: Expected schema configuration
        ingestion_config:
          type: object
          additionalProperties: true
          description: Ingestion settings
        metadata_mapping:
          type: object
          additionalProperties: true
          description: Metadata extraction rules
        enabled:
          type: boolean
          description: Source activation status
        health_status:
          $ref: '#/components/schemas/HealthStatus'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - type
        - connection_config
        - enabled
        - health_status
        - created_at
        - updated_at

    DataSourceType:
      type: string
      enum:
        - database
        - rest_api
        - webhook
        - file_system
        - message_queue
        - streaming
        - third_party_api
      description: Type of data source

    DataSourceConfig:
      type: object
      properties:
        name:
          type: string
          description: Human-readable name
        type:
          $ref: '#/components/schemas/DataSourceType'
        connection_config:
          type: object
          additionalProperties: true
          description: Connection configuration
        schema_config:
          type: object
          additionalProperties: true
          description: Schema configuration
        ingestion_config:
          type: object
          additionalProperties: true
          description: Ingestion configuration
        metadata_mapping:
          type: object
          additionalProperties: true
          description: Metadata mapping configuration
      required:
        - name
        - type
        - connection_config

    HealthStatus:
      type: string
      enum:
        - healthy
        - degraded
        - unhealthy
        - unknown
      description: Health status

    # Request/Response Models
    DataIngestRequest:
      type: object
      properties:
        source_id:
          type: string
          description: Data source identifier
        external_id:
          type: string
          description: External record identifier
          nullable: true
        data_type:
          $ref: '#/components/schemas/DataType'
        content:
          type: object
          additionalProperties: true
          description: Data content
        metadata:
          type: object
          properties:
            projectId:
              type: string
              format: uuid
              nullable: true
            domain:
              type: string
            tags:
              type: array
              items:
                type: string
            sensitivity_level:
              type: string
              enum: [public, internal, confidential, restricted]
          required:
            - domain
            - tags
            - sensitivity_level
        source_timestamp:
          type: string
          format: date-time
          nullable: true
      required:
        - source_id
        - data_type
        - content
        - metadata

    DataIngestResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/DataRecord'
      required:
        - success
        - data

    BatchIngestRequest:
      type: object
      properties:
        source_id:
          type: string
          description: Data source identifier
        records:
          type: array
          items:
            type: object
            properties:
              external_id:
                type: string
                nullable: true
              data_type:
                $ref: '#/components/schemas/DataType'
              content:
                type: object
                additionalProperties: true
              source_timestamp:
                type: string
                format: date-time
                nullable: true
            required:
              - data_type
              - content
        metadata:
          type: object
          properties:
            projectId:
              type: string
              format: uuid
              nullable: true
            domain:
              type: string
            tags:
              type: array
              items:
                type: string
            sensitivity_level:
              type: string
              enum: [public, internal, confidential, restricted]
          required:
            - domain
            - tags
            - sensitivity_level
      required:
        - source_id
        - records
        - metadata

    BatchIngestResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            total_records:
              type: integer
            successful:
              type: integer
            failed:
              type: integer
            results:
              type: array
              items:
                type: object
                properties:
                  external_id:
                    type: string
                    nullable: true
                  record_id:
                    type: string
                    format: uuid
                  status:
                    $ref: '#/components/schemas/DataStatus'
            errors:
              type: array
              items:
                type: object
                properties:
                  external_id:
                    type: string
                    nullable: true
                  error:
                    type: string
          required:
            - total_records
            - successful
            - failed
            - results
            - errors
      required:
        - success
        - data

    DataQueryResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            records:
              type: array
              items:
                $ref: '#/components/schemas/DataRecord'
            pagination:
              type: object
              properties:
                total:
                  type: integer
                limit:
                  type: integer
                offset:
                  type: integer
                has_more:
                  type: boolean
              required:
                - total
                - limit
                - offset
                - has_more
            query_time_ms:
              type: integer
          required:
            - records
            - pagination
            - query_time_ms
      required:
        - success
        - data

    DataSourceResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/DataSource'
      required:
        - success
        - data

    ConnectionTestResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            source_id:
              type: string
              format: uuid
            connection_status:
              $ref: '#/components/schemas/HealthStatus'
            response_time_ms:
              type: integer
            test_results:
              type: object
              properties:
                connectivity:
                  type: string
                  enum: [pass, fail]
                authentication:
                  type: string
                  enum: [pass, fail]
                permissions:
                  type: string
                  enum: [pass, fail]
                schema_access:
                  type: string
                  enum: [pass, fail]
              required:
                - connectivity
                - authentication
                - permissions
                - schema_access
            tested_at:
              type: string
              format: date-time
          required:
            - source_id
            - connection_status
            - response_time_ms
            - test_results
            - tested_at
      required:
        - success
        - data

    SchemaDefinition:
      type: object
      properties:
        name:
          type: string
          description: Schema name
        domain:
          type: string
          description: Knowledge domain
        schema:
          type: object
          description: JSON Schema definition
          additionalProperties: true
        version:
          type: string
          description: Schema version
      required:
        - name
        - domain
        - schema
        - version

    SchemaResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          allOf:
            - $ref: '#/components/schemas/SchemaDefinition'
            - type: object
              properties:
                id:
                  type: string
                  format: uuid
                created_at:
                  type: string
                  format: date-time
              required:
                - id
                - created_at
      required:
        - success
        - data

    ValidationRequest:
      type: object
      properties:
        schema_id:
          type: string
          format: uuid
          description: Schema to validate against
        data:
          type: object
          additionalProperties: true
          description: Data to validate
      required:
        - schema_id
        - data

    ValidationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            valid:
              type: boolean
            errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
                  value:
                    type: string
                    nullable: true
            warnings:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
          required:
            - valid
            - errors
            - warnings
      required:
        - success
        - data

    DataLineageResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            record_id:
              type: string
              format: uuid
            lineage:
              $ref: '#/components/schemas/DataLineage'
          required:
            - record_id
            - lineage
      required:
        - success
        - data

    MetadataUpdateRequest:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        domain:
          type: string
        sensitivity_level:
          type: string
          enum: [public, internal, confidential, restricted]
        retention_policy:
          type: string
          nullable: true
      additionalProperties: false

    DataRecordResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/DataRecord'
      required:
        - success
        - data

    TaggingRequest:
      type: object
      properties:
        tags:
          type: array
          items:
            type: object
            properties:
              concept:
                type: string
                description: Ontology concept URI
              confidence:
                type: number
                minimum: 0
                maximum: 1
                description: Confidence score
            required:
              - concept
              - confidence
        applied_by:
          type: string
          enum: [system, human]
        auto_approve:
          type: boolean
          default: false
      required:
        - tags
        - applied_by

    TaggingResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            record_id:
              type: string
              format: uuid
            tags_applied:
              type: integer
            pending_approval:
              type: integer
            tags:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  concept:
                    type: string
                  confidence:
                    type: number
                  status:
                    type: string
                    enum: [approved, pending_approval, rejected]
          required:
            - record_id
            - tags_applied
            - pending_approval
            - tags
      required:
        - success
        - data

    QualityAssessmentResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            record_id:
              type: string
              format: uuid
            quality_score:
              type: number
              minimum: 0
              maximum: 1
            assessment:
              type: object
              properties:
                completeness:
                  type: number
                  minimum: 0
                  maximum: 1
                accuracy:
                  type: number
                  minimum: 0
                  maximum: 1
                consistency:
                  type: number
                  minimum: 0
                  maximum: 1
                timeliness:
                  type: number
                  minimum: 0
                  maximum: 1
              required:
                - completeness
                - accuracy
                - consistency
                - timeliness
            issues:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  field:
                    type: string
                  severity:
                    type: string
                    enum: [low, medium, high, critical]
                  message:
                    type: string
            assessed_at:
              type: string
              format: date-time
          required:
            - record_id
            - quality_score
            - assessment
            - issues
            - assessed_at
      required:
        - success
        - data

    WebhookResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Event received and queued for processing"
        event_id:
          type: string
          format: uuid
      required:
        - success
        - message
        - event_id

    HealthResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/HealthStatus'
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: "1.0.0"
        uptime:
          type: integer
          description: Uptime in seconds
        components:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/HealthStatus'
            redis:
              $ref: '#/components/schemas/HealthStatus'
            event_manager:
              $ref: '#/components/schemas/HealthStatus'
            data_sources:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/HealthStatus'
          required:
            - database
            - redis
            - event_manager
            - data_sources
      required:
        - status
        - timestamp
        - version
        - uptime
        - components

    MetricsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            ingestion:
              type: object
              properties:
                records_ingested_total:
                  type: integer
                records_per_second:
                  type: number
                ingestion_latency_p95_ms:
                  type: number
                ingestion_errors_total:
                  type: integer
            processing:
              type: object
              properties:
                validation_duration_p95_ms:
                  type: number
                transformation_duration_p95_ms:
                  type: number
                quality_score_avg:
                  type: number
            storage:
              type: object
              properties:
                total_records_stored:
                  type: integer
                storage_size_bytes:
                  type: integer
                deduplication_ratio:
                  type: number
            sources:
              type: object
              properties:
                active_data_sources:
                  type: integer
                healthy_sources:
                  type: integer
                connection_errors_total:
                  type: integer
          required:
            - ingestion
            - processing
            - storage
            - sources
        collected_at:
          type: string
          format: date-time
      required:
        - success
        - data
        - collected_at

    # Common Response Models
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
      required:
        - success
        - message

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
          nullable: true
        timestamp:
          type: string
          format: date-time
      required:
        - success
        - error
        - message
        - timestamp

    # Units Management Schemas
    UnitDefinition:
      type: object
      properties:
        id:
          type: string
          description: Unique unit identifier
        symbol:
          type: string
          description: Standard symbol
        name:
          type: string
          description: Full name
        aliases:
          type: array
          items:
            type: string
          description: Alternative names/symbols
        unit_system:
          $ref: '#/components/schemas/UnitSystem'
        base_unit:
          type: string
          description: Base unit for this dimension
        conversion_factor:
          type: number
          description: Factor to convert to base unit
        conversion_offset:
          type: number
          description: Offset for affine conversions
        dimension:
          $ref: '#/components/schemas/Dimension'
        category:
          $ref: '#/components/schemas/UnitCategory'
        is_base_unit:
          type: boolean
          description: Whether this is a base unit
        is_derived:
          type: boolean
          description: Whether derived from other units
        derived_from:
          $ref: '#/components/schemas/DerivedUnitDef'
        standards_compliance:
          type: array
          items:
            type: string
          description: ISO, NIST, etc. compliance
        description:
          type: string
          description: Unit description
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - symbol
        - name
        - unit_system
        - dimension
        - category

    UnitSystem:
      type: string
      enum:
        - si
        - imperial
        - us_customary
        - cgs
        - atomic
        - natural
        - planck
        - custom
      description: Unit system classification

    UnitCategory:
      type: string
      enum:
        - length
        - mass
        - time
        - electric_current
        - temperature
        - amount_of_substance
        - luminous_intensity
        - area
        - volume
        - velocity
        - acceleration
        - force
        - energy
        - power
        - pressure
        - frequency
        - angle
        - dimensionless
      description: Unit category classification

    Dimension:
      type: object
      properties:
        length:
          type: number
          description: Exponent for length dimension
        mass:
          type: number
          description: Exponent for mass dimension
        time:
          type: number
          description: Exponent for time dimension
        electric_current:
          type: number
          description: Exponent for current dimension
        temperature:
          type: number
          description: Exponent for temperature dimension
        amount_of_substance:
          type: number
          description: Exponent for amount dimension
        luminous_intensity:
          type: number
          description: Exponent for luminous intensity
      required:
        - length
        - mass
        - time
        - electric_current
        - temperature
        - amount_of_substance
        - luminous_intensity

    DerivedUnitDef:
      type: object
      properties:
        base_units:
          type: object
          additionalProperties:
            type: number
          description: Base units with exponents
        formula:
          type: string
          description: Mathematical formula
        scale_factor:
          type: number
          description: Additional scaling factor

    UnitCollection:
      type: object
      properties:
        id:
          type: string
          description: Collection identifier
        name:
          type: string
          description: Collection name
        description:
          type: string
          description: Collection description
        unit_system:
          $ref: '#/components/schemas/UnitSystem'
        units:
          type: array
          items:
            type: string
          description: Unit IDs in collection
        is_complete:
          type: boolean
          description: Whether collection covers all dimensions
        is_coherent:
          type: boolean
          description: Whether units form coherent system
        authority:
          type: string
          description: Standards authority
        version:
          type: string
          description: Collection version
        effective_date:
          type: string
          format: date-time
          description: When collection became effective
      required:
        - id
        - name
        - unit_system
        - units

    UnitMetadata:
      type: object
      properties:
        field_units:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldUnitInfo'
          description: Units for each field
        unit_consistency_score:
          type: number
          minimum: 0
          maximum: 1
          description: Unit consistency assessment
        unit_validation_status:
          $ref: '#/components/schemas/UnitValidationStatus'
        detected_unit_conflicts:
          type: array
          items:
            $ref: '#/components/schemas/UnitConflict'
        unit_conversion_applied:
          type: array
          items:
            $ref: '#/components/schemas/UnitConversion'
        dimensional_analysis:
          $ref: '#/components/schemas/DimensionalAnalysis'

    FieldUnitInfo:
      type: object
      properties:
        unit_id:
          type: string
          description: Primary unit identifier
        unit_symbol:
          type: string
          description: Unit symbol
        confidence:
          type: number
          minimum: 0
          maximum: 1
          description: Confidence in unit detection
        detection_method:
          $ref: '#/components/schemas/UnitDetectionMethod'
        alternative_units:
          type: array
          items:
            type: string
          description: Possible alternative interpretations
        unit_source:
          $ref: '#/components/schemas/UnitSource'
        validation_status:
          $ref: '#/components/schemas/FieldUnitValidationStatus'
        conversion_target:
          type: string
          description: Target unit for normalization

    UnitDetectionMethod:
      type: string
      enum:
        - explicit
        - schema_defined
        - column_name
        - pattern_matching
        - ml_inference
        - user_specified
        - default_assumed
      description: How unit was determined

    UnitSource:
      type: string
      enum:
        - data_header
        - schema_definition
        - metadata_annotation
        - filename_pattern
        - source_configuration
        - heuristic_detection
        - user_input
      description: Where unit information came from

    UnitValidationStatus:
      type: string
      enum:
        - valid
        - invalid
        - warning
        - missing
        - conflicted
        - pending
      description: Overall validation status

    FieldUnitValidationStatus:
      type: string
      enum:
        - valid
        - invalid_unit
        - dimension_mismatch
        - unit_not_found
        - ambiguous_unit
        - missing_unit
      description: Field-specific validation status

    UnitAwareSchema:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: object
            properties:
              type:
                type: string
              unit:
                $ref: '#/components/schemas/UnitConstraint'
        unit_requirements:
          type: array
          items:
            $ref: '#/components/schemas/UnitRequirement'
        dimensional_constraints:
          type: array
          items:
            $ref: '#/components/schemas/DimensionalConstraint'

    UnitConstraint:
      type: object
      properties:
        required_unit:
          type: string
          description: Specific required unit
        allowed_units:
          type: array
          items:
            type: string
          description: List of allowed units
        dimension:
          $ref: '#/components/schemas/Dimension'
        unit_system:
          $ref: '#/components/schemas/UnitSystem'
        conversion_target:
          type: string
          description: Target unit for normalization
        validation_level:
          $ref: '#/components/schemas/UnitValidationLevel'

    UnitValidationLevel:
      type: string
      enum:
        - strict
        - dimensional
        - convertible
        - flexible
        - optional
      description: Validation strictness level

    UnitRequirement:
      type: object
      properties:
        field_pattern:
          type: string
          description: Field pattern (regex or path)
        required_dimension:
          $ref: '#/components/schemas/Dimension'
        preferred_units:
          type: array
          items:
            type: string
          description: Preferred units in order
        auto_convert:
          type: boolean
          description: Whether to auto-convert
        validation_level:
          $ref: '#/components/schemas/UnitValidationLevel'

    DimensionalConstraint:
      type: object
      properties:
        constraint_id:
          type: string
        description:
          type: string
        fields:
          type: array
          items:
            type: string
          description: Fields involved in constraint
        constraint_type:
          $ref: '#/components/schemas/DimensionalConstraintType'
        constraint_formula:
          type: string
          description: Mathematical relationship
        tolerance:
          type: number
          description: Allowed deviation

    DimensionalConstraintType:
      type: string
      enum:
        - equality
        - ratio
        - product
        - quotient
        - custom
      description: Type of dimensional constraint

    UnitValidationResult:
      type: object
      properties:
        is_valid:
          type: boolean
        validation_summary:
          $ref: '#/components/schemas/ValidationSummary'
        field_validations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldValidationResult'
        dimensional_validations:
          type: array
          items:
            $ref: '#/components/schemas/DimensionalValidationResult'
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/UnitCorrectionSuggestion'
        validation_metadata:
          $ref: '#/components/schemas/ValidationMetadata'

    FieldValidationResult:
      type: object
      properties:
        field_path:
          type: string
        detected_unit:
          type: string
        expected_unit:
          type: string
        validation_status:
          $ref: '#/components/schemas/FieldUnitValidationStatus'
        error_message:
          type: string
        confidence:
          type: number
        suggestions:
          type: array
          items:
            type: string

    DimensionalValidationResult:
      type: object
      properties:
        constraint_id:
          type: string
        is_satisfied:
          type: boolean
        involved_fields:
          type: array
          items:
            type: string
        computed_dimensions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Dimension'
        error_description:
          type: string
        suggested_corrections:
          type: array
          items:
            type: string

    ConversionResult:
      type: object
      properties:
        original_value:
          type: number
        converted_value:
          type: number
        from_unit:
          type: string
        to_unit:
          type: string
        conversion_factor:
          type: number
        conversion_offset:
          type: number
        precision_loss:
          type: number
        conversion_metadata:
          $ref: '#/components/schemas/ConversionMetadata'

    ConversionMetadata:
      type: object
      properties:
        conversion_path:
          type: array
          items:
            $ref: '#/components/schemas/ConversionStep'
        total_uncertainty:
          type: number
        significant_figures:
          type: integer
        conversion_timestamp:
          type: string
          format: date-time
        converter_version:
          type: string

    ConversionStep:
      type: object
      properties:
        from_unit:
          type: string
        to_unit:
          type: string
        operation:
          $ref: '#/components/schemas/ConversionOperation'
        factor:
          type: number
        offset:
          type: number
        description:
          type: string

    ConversionOperation:
      type: string
      enum:
        - multiply
        - divide
        - add
        - subtract
        - function
        - lookup
      description: Type of conversion operation

    DimensionalAnalysis:
      type: object
      properties:
        analysis_id:
          type: string
        field_dimensions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnalyzedDimension'
        dimensional_relationships:
          type: array
          items:
            $ref: '#/components/schemas/DimensionalRelationship'
        consistency_score:
          type: number
        identified_patterns:
          type: array
          items:
            $ref: '#/components/schemas/DimensionalPattern'
        anomalies:
          type: array
          items:
            $ref: '#/components/schemas/DimensionalAnomaly'
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionalSuggestion'

    AnalyzedDimension:
      type: object
      properties:
        field_path:
          type: string
        detected_dimension:
          $ref: '#/components/schemas/Dimension'
        confidence:
          type: number
        supporting_evidence:
          type: array
          items:
            type: string
        alternative_interpretations:
          type: array
          items:
            $ref: '#/components/schemas/Dimension'

    DimensionalRelationship:
      type: object
      properties:
        relationship_id:
          type: string
        involved_fields:
          type: array
          items:
            type: string
        relationship_type:
          $ref: '#/components/schemas/RelationshipType'
        mathematical_expression:
          type: string
        confidence:
          type: number
        validation_status:
          type: string

    RelationshipType:
      type: string
      enum:
        - product
        - quotient
        - sum
        - difference
        - power
        - root
        - logarithmic
        - exponential
        - trigonometric
      description: Type of mathematical relationship

    UnitDetectionResult:
      type: object
      properties:
        detection_id:
          type: string
        field_detections:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldUnitDetection'
        overall_confidence:
          type: number
        detection_metadata:
          $ref: '#/components/schemas/DetectionMetadata'
        improvement_suggestions:
          type: array
          items:
            type: string

    FieldUnitDetection:
      type: object
      properties:
        field_path:
          type: string
        detected_units:
          type: array
          items:
            $ref: '#/components/schemas/UnitCandidate'
        recommended_unit:
          type: string
        confidence:
          type: number
        detection_method:
          $ref: '#/components/schemas/UnitDetectionMethod'
        supporting_evidence:
          type: array
          items:
            $ref: '#/components/schemas/Evidence'

    UnitCandidate:
      type: object
      properties:
        unit_id:
          type: string
        unit_symbol:
          type: string
        confidence:
          type: number
        evidence_score:
          type: number
        likelihood_factors:
          type: array
          items:
            type: string

    Evidence:
      type: object
      properties:
        evidence_type:
          $ref: '#/components/schemas/EvidenceType'
        description:
          type: string
        confidence_contribution:
          type: number
        source:
          type: string

    EvidenceType:
      type: string
      enum:
        - column_name_match
        - value_range_match
        - pattern_match
        - context_clue
        - similar_data_history
        - domain_knowledge
        - unit_symbol_present
      description: Type of evidence for unit detection

    DetectionContext:
      type: object
      properties:
        source_type:
          type: string
        domain:
          type: string
        file_extension:
          type: string
        column_names:
          type: array
          items:
            type: string
        data_patterns:
          type: array
          items:
            type: string
        previous_detections:
          type: array
          items:
            $ref: '#/components/schemas/UnitDetectionResult'

    UnitSuggestion:
      type: object
      properties:
        unit_id:
          type: string
        unit_symbol:
          type: string
        unit_name:
          type: string
        confidence:
          type: number
        reasoning:
          type: string
        category:
          $ref: '#/components/schemas/UnitCategory'
        unit_system:
          $ref: '#/components/schemas/UnitSystem'

    UnitFeedback:
      type: object
      properties:
        detection_id:
          type: string
        field_path:
          type: string
        correct_unit:
          type: string
        incorrect_detection:
          type: string
        feedback_type:
          $ref: '#/components/schemas/FeedbackType'
        confidence:
          type: number
        user_id:
          type: string
        timestamp:
          type: string
          format: date-time
      required:
        - detection_id
        - field_path
        - correct_unit
        - feedback_type
        - user_id

    FeedbackType:
      type: string
      enum:
        - correction
        - confirmation
        - refinement
        - rejection
      description: Type of feedback provided

    UnitConflict:
      type: object
      properties:
        conflict_id:
          type: string
        field_path:
          type: string
        conflicting_units:
          type: array
          items:
            type: string
        sources:
          type: array
          items:
            $ref: '#/components/schemas/UnitSource'
        severity:
          $ref: '#/components/schemas/ConflictSeverity'
        recommendation:
          type: string

    ConflictSeverity:
      type: string
      enum:
        - critical
        - high
        - medium
        - low
        - info
      description: Severity of unit conflict

    UnitConversion:
      type: object
      properties:
        field_path:
          type: string
        original_unit:
          type: string
        target_unit:
          type: string
        conversion_applied:
          type: boolean
        conversion_result:
          $ref: '#/components/schemas/ConversionResult'

    ValidationSummary:
      type: object
      properties:
        total_fields:
          type: integer
        valid_fields:
          type: integer
        invalid_fields:
          type: integer
        warning_fields:
          type: integer
        missing_unit_fields:
          type: integer
        overall_score:
          type: number
          minimum: 0
          maximum: 1

    UnitCorrectionSuggestion:
      type: object
      properties:
        field_path:
          type: string
        current_unit:
          type: string
        suggested_unit:
          type: string
        correction_type:
          type: string
        confidence:
          type: number
        reasoning:
          type: string

    ValidationMetadata:
      type: object
      properties:
        validation_timestamp:
          type: string
          format: date-time
        validator_version:
          type: string
        validation_duration_ms:
          type: integer
        rules_applied:
          type: array
          items:
            type: string

    DetectionMetadata:
      type: object
      properties:
        detection_timestamp:
          type: string
          format: date-time
        detector_version:
          type: string
        detection_duration_ms:
          type: integer
        algorithms_used:
          type: array
          items:
            type: string

    DimensionalPattern:
      type: object
      properties:
        pattern_id:
          type: string
        pattern_type:
          type: string
        description:
          type: string
        confidence:
          type: number
        affected_fields:
          type: array
          items:
            type: string

    DimensionalAnomaly:
      type: object
      properties:
        anomaly_id:
          type: string
        anomaly_type:
          type: string
        description:
          type: string
        severity:
          type: string
        affected_fields:
          type: array
          items:
            type: string

    DimensionalSuggestion:
      type: object
      properties:
        suggestion_id:
          type: string
        suggestion_type:
          type: string
        description:
          type: string
        recommended_action:
          type: string
        confidence:
          type: number

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "BAD_REQUEST"
            message: "Invalid request parameters"
            timestamp: "2025-01-15T14:35:12Z"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "UNAUTHORIZED"
            message: "Authentication required"
            timestamp: "2025-01-15T14:35:12Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "NOT_FOUND"
            message: "Resource not found"
            timestamp: "2025-01-15T14:35:12Z"

    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "CONFLICT"
            message: "Resource already exists"
            timestamp: "2025-01-15T14:35:12Z"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  validation_errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string
                        value:
                          type: string
                          nullable: true
          example:
            success: false
            error: "VALIDATION_ERROR"
            message: "Request validation failed"
            validation_errors:
              - field: "source_id"
                message: "source_id is required"
                value: null
            timestamp: "2025-01-15T14:35:12Z"

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "INTERNAL_ERROR"
            message: "An unexpected error occurred"
            timestamp: "2025-01-15T14:35:12Z"

tags:
  - name: Data Ingestion
    description: Endpoints for ingesting data from various sources
  - name: Data Querying
    description: Endpoints for querying and retrieving data
  - name: Data Streaming
    description: Real-time data streaming capabilities
  - name: Data Sources
    description: Management of data source configurations
  - name: Schema Management
    description: Data schema registration and management
  - name: Data Validation
    description: Data validation against registered schemas
  - name: Data Lineage
    description: Data lineage tracking and retrieval
  - name: Metadata Management
    description: Data metadata management
  - name: Ontology Tagging
    description: Ontological tagging and classification
  - name: Data Quality
    description: Data quality assessment and monitoring
  - name: External Integration
    description: External system integration via webhooks
  - name: Health & Monitoring
    description: Service health and performance monitoring
  - name: Units Management
    description: Core unit definition and management operations
  - name: Unit Collections
    description: Unit collection management and organization
  - name: Unit Validation
    description: Unit validation and consistency checking
  - name: Unit Conversion
    description: Unit conversion operations and transformations
  - name: Dimensional Analysis
    description: Dimensional analysis and consistency validation
  - name: Unit Intelligence
    description: Automated unit detection and machine learning capabilities
  - name: Domain Integration
    description: Domain registration and semantic integration
  - name: Domain Mapping
    description: Cross-domain mapping and transformation
  - name: Visual Data Management
    description: ReactFlow-based data visualization and management
  - name: Enhanced Ontology Integration
    description: Deep integration with ontology workspace service
  - name: DAS Intelligence
    description: Digital Assistance System enhanced operations
