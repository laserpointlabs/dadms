openapi: 3.0.3
info:
  title: DADMS Knowledge Service API
  version: 1.0.0
  description: |
    OpenAPI specification for the DADMS 2.0 Knowledge Service. Defines endpoints for document management, search, and tag operations.
servers:
  - url: http://localhost:3001
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Document:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        url:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        size:
          type: integer
        content_type:
          type: string
    DocumentUpload:
      type: object
      required: [name, file]
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        file:
          type: string
          format: binary
    DocumentSearch:
      type: object
      properties:
        query:
          type: string
        tags:
          type: array
          items:
            type: string
        page:
          type: integer
        pageSize:
          type: integer
    Tag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        color:
          type: string
    TagCreate:
      type: object
      required: [name]
      properties:
        name:
          type: string
        description:
          type: string
        color:
          type: string
    TagUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        color:
          type: string
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: string

security:
  - bearerAuth: []

paths:
  /documents:
    get:
      summary: Search documents
      tags: [Documents]
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Search query (fulltext or semantic)
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          description: Filter by tag IDs
        - in: query
          name: page
          schema:
            type: integer
          description: Page number (optional)
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Page size (optional)
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Upload a new document
      tags: [Documents]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentUpload'
      responses:
        '201':
          description: Document uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /documents/{id}:
    get:
      summary: Get document metadata by ID
      tags: [Documents]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      summary: Delete document by ID
      tags: [Documents]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Document deleted
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /documents/{id}/download:
    get:
      summary: Download document file
      tags: [Documents]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /tags:
    get:
      summary: List all tags
      tags: [Tags]
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      summary: Create a new tag
      tags: [Tags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '201':
          description: Tag created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /tags/{id}:
    get:
      summary: Get tag by ID
      tags: [Tags]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      summary: Update tag by ID
      tags: [Tags]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagUpdate'
      responses:
        '200':
          description: Tag updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      summary: Delete tag by ID
      tags: [Tags]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Tag deleted
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /knowledge/health:
    get:
      summary: Service health/readiness check
      description: Returns service health status, uptime, and version.
      tags: [Knowledge]
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  uptime:
                    type: integer
                  version:
                    type: string 