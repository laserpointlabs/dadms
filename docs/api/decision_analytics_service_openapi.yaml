openapi: 3.0.3
info:
  title: DADMS 2.0 - Decision Analytics Service API
  description: |
    Decision Analytics service serves as DADMS 2.0's comprehensive decision intelligence engine, providing advanced 
    analytics capabilities for decision space exploration, impact assessment, and performance scoring.

    ## Key Features
    - **Decision Space Analysis**: Map and simulate decision trees, explore scenarios, and identify optimal paths
    - **Impact Analysis**: Assess multi-domain impacts, cascading effects, and risk profiles for decisions
    - **Scoring & Efficacy Analysis**: Track performance metrics, analyze trends, and provide comparative benchmarking
    - **Advanced Analytics**: Statistical analysis, machine learning insights, and predictive modeling
    - **Visualization**: Interactive decision trees, impact maps, and performance dashboards

    ## Analytical Capabilities
    - **Decision Tree Construction**: Build comprehensive decision graphs from events and alternatives
    - **Scenario Simulation**: Agent and LLM-driven exploration of decision paths and outcomes
    - **Risk Assessment**: Multi-dimensional risk analysis with cascading effect detection
    - **Performance Tracking**: Real-time and historical performance metrics for entities and processes
    - **Game Theory Analysis**: Payoff analysis, Nash equilibria, and strategic optimization

  version: 1.0.0
  contact:
    name: DADMS Development Team
    email: dev@dadms.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3018
    description: Development server
  - url: https://api.dadms.example.com/decision-analytics
    description: Production server

tags:
  - name: Decision Space Analysis
    description: Decision tree construction, simulation, and scenario planning
  - name: Impact Analysis
    description: Multi-domain impact assessment and risk analysis
  - name: Scoring & Efficacy
    description: Performance tracking, metrics, and comparative analysis
  - name: Visualization
    description: Chart generation and interactive visualization
  - name: Configuration
    description: Analysis framework and metric configuration
  - name: Health & Monitoring
    description: Service health and performance monitoring

paths:
  # Decision Space Analysis Endpoints
  /decision-space/analyze:
    post:
      tags:
        - Decision Space Analysis
      summary: Analyze decision space for scenario
      description: Construct and analyze comprehensive decision space graph for given event/scenario
      operationId: analyzeDecisionSpace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecisionSpaceAnalysisRequest'
      responses:
        '200':
          description: Decision space analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecisionSpaceGraph'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /decision-space/graphs/{graphId}:
    get:
      tags:
        - Decision Space Analysis
      summary: Get decision space graph
      description: Retrieve specific decision space graph by ID
      operationId: getDecisionSpaceGraph
      parameters:
        - name: graphId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Decision space graph retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecisionSpaceGraph'
        '404':
          $ref: '#/components/responses/NotFound'

  /decision-space/simulate-branch:
    post:
      tags:
        - Decision Space Analysis
      summary: Simulate decision branch
      description: Run simulation for specific decision branch with given depth
      operationId: simulateBranch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BranchSimulationRequest'
      responses:
        '200':
          description: Branch simulation completed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BranchAnalysis'

  /decision-space/scenarios/generate:
    post:
      tags:
        - Decision Space Analysis
      summary: Generate scenarios
      description: Generate multiple scenarios for scenario planning and analysis
      operationId: generateScenarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioGenerationRequest'
      responses:
        '200':
          description: Scenarios generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioSet'

  /decision-space/optimize-path:
    post:
      tags:
        - Decision Space Analysis
      summary: Optimize decision path
      description: Find optimal path between decision nodes based on criteria
      operationId: optimizePath
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathOptimizationRequest'
      responses:
        '200':
          description: Optimal path found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptimalPath'

  # Impact Analysis Endpoints
  /impact/assess:
    post:
      tags:
        - Impact Analysis
      summary: Assess decision impact
      description: Comprehensive impact assessment across multiple domains
      operationId: assessImpact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImpactAssessmentRequest'
      responses:
        '200':
          description: Impact assessment completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImpactReport'

  /impact/risk-analysis:
    post:
      tags:
        - Impact Analysis
      summary: Analyze risk profile
      description: Detailed risk analysis with uncertainty and sensitivity assessment
      operationId: analyzeRisk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskAnalysisRequest'
      responses:
        '200':
          description: Risk analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskProfile'

  /impact/cascading-effects:
    post:
      tags:
        - Impact Analysis
      summary: Analyze cascading effects
      description: Evaluate cascading effects and propagation paths
      operationId: evaluateCascading
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CascadingEffectRequest'
      responses:
        '200':
          description: Cascading effect analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CascadingEffectAnalysis'

  /impact/compare-alternatives:
    post:
      tags:
        - Impact Analysis
      summary: Compare decision alternatives
      description: Comparative analysis of multiple decision alternatives
      operationId: compareAlternatives
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlternativeComparisonRequest'
      responses:
        '200':
          description: Alternative comparison completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlternativeComparison'

  /impact/reports/{reportId}:
    get:
      tags:
        - Impact Analysis
      summary: Get impact report
      description: Retrieve specific impact analysis report
      operationId: getImpactReport
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Impact report retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImpactReport'

  # Scoring & Efficacy Endpoints
  /scoring/score-entity:
    post:
      tags:
        - Scoring & Efficacy
      summary: Score entity performance
      description: Calculate performance score for entity with context
      operationId: scoreEntity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityScoringRequest'
      responses:
        '200':
          description: Entity scored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResult'

  /scoring/entities/{entityId}/history:
    get:
      tags:
        - Scoring & Efficacy
      summary: Get efficacy history
      description: Retrieve historical performance data for entity
      operationId: getEfficacyHistory
      parameters:
        - name: entityId
          in: path
          required: true
          schema:
            type: string
        - name: timeRange
          in: query
          schema:
            type: string
            enum: [1d, 1w, 1m, 3m, 6m, 1y]
        - name: domain
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Efficacy history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoreHistory'

  /scoring/leaderboard:
    get:
      tags:
        - Scoring & Efficacy
      summary: Get performance leaderboard
      description: Retrieve ranked performance leaderboard
      operationId: getLeaderboard
      parameters:
        - name: domain
          in: query
          schema:
            type: string
        - name: entityType
          in: query
          schema:
            $ref: '#/components/schemas/EntityType'
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: criteria
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Leaderboard retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RankedEntity'

  /scoring/update-score:
    post:
      tags:
        - Scoring & Efficacy
      summary: Update entity score
      description: Update entity score with feedback integration
      operationId: updateScore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreUpdateRequest'
      responses:
        '200':
          description: Score updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreResult'

  /scoring/feedback:
    post:
      tags:
        - Scoring & Efficacy
      summary: Submit performance feedback
      description: Submit feedback for performance validation and adjustment
      operationId: submitFeedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackSubmissionRequest'
      responses:
        '200':
          description: Feedback submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackIntegration'

  /scoring/analytics:
    get:
      tags:
        - Scoring & Efficacy
      summary: Get scoring analytics
      description: Retrieve comprehensive scoring analytics and insights
      operationId: getScoringAnalytics
      parameters:
        - name: domain
          in: query
          schema:
            type: string
        - name: timeRange
          in: query
          schema:
            type: string
            enum: [1d, 1w, 1m, 3m, 6m, 1y]
        - name: entityType
          in: query
          schema:
            $ref: '#/components/schemas/EntityType'
      responses:
        '200':
          description: Scoring analytics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoringAnalytics'

  # Visualization Endpoints
  /visualization/generate:
    post:
      tags:
        - Visualization
      summary: Generate visualization
      description: Generate interactive visualization for analysis results
      operationId: generateVisualization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VisualizationRequest'
      responses:
        '200':
          description: Visualization generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisualizationResult'

  /visualization/export:
    post:
      tags:
        - Visualization
      summary: Export analysis
      description: Export analysis results in various formats
      operationId: exportAnalysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportRequest'
      responses:
        '200':
          description: Analysis exported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportResult'

  # Configuration Endpoints
  /configuration/frameworks:
    get:
      tags:
        - Configuration
      summary: List analysis frameworks
      description: Retrieve available analysis frameworks
      operationId: listFrameworks
      responses:
        '200':
          description: Frameworks listed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalysisFramework'

    post:
      tags:
        - Configuration
      summary: Create analysis framework
      description: Create new analysis framework configuration
      operationId: createFramework
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FrameworkCreateRequest'
      responses:
        '201':
          description: Framework created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisFramework'

  /configuration/frameworks/{frameworkId}:
    get:
      tags:
        - Configuration
      summary: Get analysis framework
      description: Retrieve specific analysis framework
      operationId: getFramework
      parameters:
        - name: frameworkId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Framework retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisFramework'

    put:
      tags:
        - Configuration
      summary: Update analysis framework
      description: Update existing analysis framework
      operationId: updateFramework
      parameters:
        - name: frameworkId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FrameworkUpdateRequest'
      responses:
        '200':
          description: Framework updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisFramework'

    delete:
      tags:
        - Configuration
      summary: Delete analysis framework
      description: Delete analysis framework configuration
      operationId: deleteFramework
      parameters:
        - name: frameworkId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Framework deleted

  /configuration/metrics:
    get:
      tags:
        - Configuration
      summary: List metric configurations
      description: Retrieve available metric configurations
      operationId: listMetrics
      parameters:
        - name: frameworkId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Metrics listed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetricConfiguration'

    post:
      tags:
        - Configuration
      summary: Create metric configuration
      description: Create new metric configuration
      operationId: createMetric
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricCreateRequest'
      responses:
        '201':
          description: Metric created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricConfiguration'

  # Health & Monitoring
  /health:
    get:
      tags:
        - Health & Monitoring
      summary: Health check
      description: Comprehensive health check of service and dependencies
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /metrics:
    get:
      tags:
        - Health & Monitoring
      summary: Service metrics
      description: Retrieve service performance metrics
      operationId: getMetrics
      responses:
        '200':
          description: Metrics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceMetrics'

components:
  schemas:
    # Decision Space Analysis Schemas
    DecisionSpaceAnalysisRequest:
      type: object
      required:
        - eventId
      properties:
        eventId:
          type: string
          description: ID of the root event to analyze
        options:
          $ref: '#/components/schemas/AnalysisOptions'

    AnalysisOptions:
      type: object
      properties:
        depth:
          type: integer
          default: 5
          minimum: 1
          maximum: 20
        simulationCount:
          type: integer
          default: 100
          minimum: 1
          maximum: 10000
        confidenceThreshold:
          type: number
          format: float
          default: 0.8
          minimum: 0
          maximum: 1
        riskTolerance:
          $ref: '#/components/schemas/RiskTolerance'
        domainFocus:
          type: array
          items:
            $ref: '#/components/schemas/ImpactDomain'
        timeHorizon:
          $ref: '#/components/schemas/TimeHorizon'

    DecisionSpaceGraph:
      type: object
      properties:
        id:
          type: string
        scenarioId:
          type: string
        rootEvent:
          $ref: '#/components/schemas/EventNode'
        decisionNodes:
          type: array
          items:
            $ref: '#/components/schemas/DecisionNode'
        outcomeNodes:
          type: array
          items:
            $ref: '#/components/schemas/OutcomeNode'
        branches:
          type: array
          items:
            $ref: '#/components/schemas/DecisionBranch'
        metadata:
          $ref: '#/components/schemas/GraphMetadata'

    EventNode:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/EventType'
        description:
          type: string
        timestamp:
          type: string
          format: date-time
        context:
          $ref: '#/components/schemas/EventContext'
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/Trigger'
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'

    DecisionNode:
      type: object
      properties:
        id:
          type: string
        parentEventId:
          type: string
        decisionType:
          $ref: '#/components/schemas/DecisionType'
        alternatives:
          type: array
          items:
            $ref: '#/components/schemas/Alternative'
        decisionCriteria:
          $ref: '#/components/schemas/DecisionCriteria'
        agentAssignments:
          type: array
          items:
            $ref: '#/components/schemas/AgentAssignment'
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        confidenceScore:
          type: number
          format: float

    OutcomeNode:
      type: object
      properties:
        id:
          type: string
        parentDecisionId:
          type: string
        outcomeType:
          $ref: '#/components/schemas/OutcomeType'
        probability:
          type: number
          format: float
        impactDomains:
          type: array
          items:
            $ref: '#/components/schemas/ImpactDomain'
        cascadingEffects:
          type: array
          items:
            $ref: '#/components/schemas/CascadingEffect'
        performanceMetrics:
          type: array
          items:
            $ref: '#/components/schemas/PerformanceMetric'

    DecisionBranch:
      type: object
      properties:
        id:
          type: string
        sourceNodeId:
          type: string
        targetNodeId:
          type: string
        branchType:
          $ref: '#/components/schemas/BranchType'
        probability:
          type: number
          format: float
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
        cost:
          type: number
          format: float
        riskScore:
          type: number
          format: float

    BranchSimulationRequest:
      type: object
      required:
        - branchId
      properties:
        branchId:
          type: string
        depth:
          type: integer
          default: 3
        simulationParameters:
          $ref: '#/components/schemas/SimulationParameters'

    BranchAnalysis:
      type: object
      properties:
        branchId:
          type: string
        depth:
          type: integer
        simulationResults:
          type: array
          items:
            $ref: '#/components/schemas/SimulationResult'
        convergencePoints:
          type: array
          items:
            $ref: '#/components/schemas/ConvergencePoint'
        riskAssessment:
          $ref: '#/components/schemas/RiskAssessment'
        optimizationSuggestions:
          type: array
          items:
            $ref: '#/components/schemas/OptimizationSuggestion'

    # Impact Analysis Schemas
    ImpactAssessmentRequest:
      type: object
      required:
        - decisionId
      properties:
        decisionId:
          type: string
        contextThreadId:
          type: string
        metrics:
          $ref: '#/components/schemas/MetricSet'
        analysisScope:
          $ref: '#/components/schemas/AnalysisScope'

    ImpactReport:
      type: object
      properties:
        analysisId:
          type: string
        decisionId:
          type: string
        contextThreadId:
          type: string
        impactDomains:
          type: array
          items:
            $ref: '#/components/schemas/DomainImpact'
        cascadingEffects:
          $ref: '#/components/schemas/CascadingEffectAnalysis'
        gameTheoryAnalysis:
          $ref: '#/components/schemas/GameTheoryAnalysis'
        riskProfile:
          $ref: '#/components/schemas/RiskProfile'
        mitigationStrategies:
          type: array
          items:
            $ref: '#/components/schemas/MitigationStrategy'
        summary:
          $ref: '#/components/schemas/ImpactSummary'

    DomainImpact:
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/ImpactDomain'
        impactScore:
          type: number
          format: float
        impactType:
          $ref: '#/components/schemas/ImpactType'
        affectedEntities:
          type: array
          items:
            $ref: '#/components/schemas/AffectedEntity'
        quantitativeMeasures:
          type: array
          items:
            $ref: '#/components/schemas/QuantitativeMeasure'
        qualitativeAssessment:
          $ref: '#/components/schemas/QualitativeAssessment'
        confidenceLevel:
          type: number
          format: float

    RiskProfile:
      type: object
      properties:
        overallRiskScore:
          type: number
          format: float
        riskCategories:
          type: array
          items:
            $ref: '#/components/schemas/RiskCategory'
        riskFactors:
          type: array
          items:
            $ref: '#/components/schemas/RiskFactor'
        uncertaintyAnalysis:
          $ref: '#/components/schemas/UncertaintyAnalysis'
        sensitivityAnalysis:
          $ref: '#/components/schemas/SensitivityAnalysis'
        monteCarloResults:
          $ref: '#/components/schemas/MonteCarloResults'

    # Scoring & Efficacy Schemas
    EntityScoringRequest:
      type: object
      required:
        - entityId
        - entityType
      properties:
        entityId:
          type: string
        entityType:
          $ref: '#/components/schemas/EntityType'
        context:
          $ref: '#/components/schemas/ScoreContext'
        metrics:
          type: array
          items:
            type: string

    ScoreResult:
      type: object
      properties:
        entityId:
          type: string
        entityType:
          $ref: '#/components/schemas/EntityType'
        scoreContext:
          $ref: '#/components/schemas/ScoreContext'
        performanceMetrics:
          $ref: '#/components/schemas/PerformanceMetrics'
        historicalTrends:
          type: array
          items:
            $ref: '#/components/schemas/HistoricalTrend'
        comparativeAnalysis:
          $ref: '#/components/schemas/ComparativeAnalysis'
        improvementRecommendations:
          type: array
          items:
            $ref: '#/components/schemas/ImprovementRecommendation'

    PerformanceMetrics:
      type: object
      properties:
        overallScore:
          type: number
          format: float
        battingAverage:
          type: number
          format: float
        clutchPerformance:
          type: number
          format: float
        consistencyScore:
          type: number
          format: float
        improvementRate:
          type: number
          format: float
        domainScores:
          type: array
          items:
            $ref: '#/components/schemas/DomainScore'
        compositeMetrics:
          type: array
          items:
            $ref: '#/components/schemas/CompositeMetric'

    ScoreHistory:
      type: object
      properties:
        entityId:
          type: string
        timePeriod:
          $ref: '#/components/schemas/TimePeriod'
        historicalScores:
          type: array
          items:
            $ref: '#/components/schemas/HistoricalScore'
        trendAnalysis:
          $ref: '#/components/schemas/TrendAnalysis'
        milestoneEvents:
          type: array
          items:
            $ref: '#/components/schemas/MilestoneEvent'
        performancePatterns:
          type: array
          items:
            $ref: '#/components/schemas/PerformancePattern'

    RankedEntity:
      type: object
      properties:
        entityId:
          type: string
        entityType:
          $ref: '#/components/schemas/EntityType'
        rank:
          type: integer
        score:
          type: number
          format: float
        percentile:
          type: number
          format: float
        domain:
          type: string
        rankingCriteria:
          $ref: '#/components/schemas/RankingCriteria'

    FeedbackIntegration:
      type: object
      properties:
        feedbackId:
          type: string
        sourceType:
          $ref: '#/components/schemas/FeedbackSourceType'
        sourceId:
          type: string
        targetEntityId:
          type: string
        feedbackType:
          $ref: '#/components/schemas/FeedbackType'
        rating:
          type: number
          format: float
        comments:
          type: string
        suggestedAdjustments:
          type: array
          items:
            $ref: '#/components/schemas/ScoreAdjustment'
        validationStatus:
          $ref: '#/components/schemas/ValidationStatus'
        confidenceLevel:
          type: number
          format: float

    # Visualization Schemas
    VisualizationRequest:
      type: object
      required:
        - graphId
        - format
      properties:
        graphId:
          type: string
        format:
          $ref: '#/components/schemas/VisualizationFormat'
        options:
          $ref: '#/components/schemas/VisualizationOptions'

    VisualizationResult:
      type: object
      properties:
        visualizationId:
          type: string
        format:
          $ref: '#/components/schemas/VisualizationFormat'
        content:
          type: string
        interactiveFeatures:
          type: array
          items:
            $ref: '#/components/schemas/InteractiveFeature'
        exportOptions:
          type: array
          items:
            $ref: '#/components/schemas/ExportOption'

    # Configuration Schemas
    AnalysisFramework:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        frameworkType:
          $ref: '#/components/schemas/FrameworkType'
        configuration:
          type: object
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string

    MetricConfiguration:
      type: object
      properties:
        id:
          type: string
        frameworkId:
          type: string
        metricName:
          type: string
        metricType:
          type: string
        formula:
          type: string
        weight:
          type: number
          format: float
        normalizationMethod:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    # Enumeration Types
    EventType:
      type: string
      enum:
        - initial
        - intermediate
        - terminal
        - crisis
        - opportunity

    DecisionType:
      type: string
      enum:
        - strategic
        - tactical
        - operational
        - emergency
        - routine

    OutcomeType:
      type: string
      enum:
        - success
        - failure
        - partial
        - unexpected
        - neutral

    BranchType:
      type: string
      enum:
        - direct
        - conditional
        - probabilistic
        - stochastic

    RiskLevel:
      type: string
      enum:
        - very_low
        - low
        - medium
        - high
        - critical

    ImpactDomain:
      type: string
      enum:
        - mission
        - system
        - stakeholder
        - financial
        - operational
        - strategic
        - environmental
        - regulatory

    ImpactType:
      type: string
      enum:
        - positive
        - negative
        - neutral
        - mixed
        - uncertain

    EntityType:
      type: string
      enum:
        - decision
        - agent
        - workflow
        - tool
        - model
        - process

    FeedbackSourceType:
      type: string
      enum:
        - human_expert
        - ai_agent
        - system_automated
        - peer_review

    FeedbackType:
      type: string
      enum:
        - score_correction
        - performance_validation
        - improvement_suggestion
        - context_clarification

    ValidationStatus:
      type: string
      enum:
        - pending
        - approved
        - rejected
        - under_review

    VisualizationFormat:
      type: string
      enum:
        - tree_diagram
        - network_graph
        - heatmap
        - dashboard
        - interactive_chart

    FrameworkType:
      type: string
      enum:
        - decision_space
        - impact_analysis
        - scoring_system

    # Supporting Types
    RiskTolerance:
      type: string
      enum:
        - conservative
        - moderate
        - aggressive

    TimeHorizon:
      type: string
      enum:
        - short_term
        - medium_term
        - long_term

    TimePeriod:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        granularity:
          type: string
          enum:
            - hour
            - day
            - week
            - month

    # Complex Supporting Types
    GraphMetadata:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        analysisDepth:
          type: integer
        simulationParams:
          $ref: '#/components/schemas/SimulationParameters'
        complexityScore:
          type: number
          format: float
        confidenceLevel:
          type: number
          format: float

    SimulationParameters:
      type: object
      properties:
        iterations:
          type: integer
        randomSeed:
          type: integer
        convergenceCriteria:
          type: number
          format: float
        timeStep:
          type: number
          format: float

    EventContext:
      type: object
      properties:
        domain:
          type: string
        priority:
          type: string
        stakeholders:
          type: array
          items:
            type: string
        constraints:
          type: object

    Alternative:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        feasibility:
          type: number
          format: float
        cost:
          type: number
          format: float
        risk:
          type: number
          format: float

    DecisionCriteria:
      type: object
      properties:
        weights:
          type: object
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        optimizationGoal:
          type: string

    AgentAssignment:
      type: object
      properties:
        agentId:
          type: string
        agentType:
          type: string
        role:
          type: string
        capabilities:
          type: array
          items:
            type: string

    Trigger:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        condition:
          type: string
        probability:
          type: number
          format: float

    Constraint:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        description:
          type: string
        isHard:
          type: boolean
        weight:
          type: number
          format: float

    Condition:
      type: object
      properties:
        variable:
          type: string
        operator:
          type: string
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean

    SimulationResult:
      type: object
      properties:
        simulationId:
          type: string
        branchPath:
          type: array
          items:
            type: string
        finalOutcome:
          $ref: '#/components/schemas/OutcomeNode'
        executionTime:
          type: number
        resourceConsumption:
          $ref: '#/components/schemas/ResourceUsage'
        successProbability:
          type: number
          format: float
        confidenceInterval:
          $ref: '#/components/schemas/ConfidenceInterval'

    ConvergencePoint:
      type: object
      properties:
        nodeId:
          type: string
        convergingBranches:
          type: array
          items:
            type: string
        convergenceType:
          type: string
          enum:
            - bottleneck
            - critical_path
            - decision_point
            - risk_accumulation
        strategicImportance:
          type: number
          format: float
        riskAmplification:
          type: number
          format: float

    OptimizationSuggestion:
      type: object
      properties:
        type:
          type: string
        target:
          type: string
        recommendation:
          type: string
        estimatedImprovement:
          type: string
        implementationCost:
          type: number
          format: float

    # Additional complex types would continue here...
    # Due to space constraints, I'm including key representative schemas
    # The full implementation would include all referenced types

    # Health & Monitoring Schemas
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum:
            - healthy
            - degraded
            - unhealthy
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        uptime:
          type: integer
        checks:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/ComponentHealth'
            eventManager:
              $ref: '#/components/schemas/ComponentHealth'
            externalServices:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/ComponentHealth'

    ComponentHealth:
      type: object
      properties:
        status:
          type: string
          enum:
            - healthy
            - degraded
            - unhealthy
        responseTimeMs:
          type: number
        details:
          type: string

    ServiceMetrics:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        requestMetrics:
          $ref: '#/components/schemas/RequestMetrics'
        analysisMetrics:
          $ref: '#/components/schemas/AnalysisMetrics'
        resourceMetrics:
          $ref: '#/components/schemas/ResourceMetrics'
        queueMetrics:
          $ref: '#/components/schemas/QueueMetrics'

    RequestMetrics:
      type: object
      properties:
        requestsTotal:
          type: integer
        requestsPerSecond:
          type: number
          format: float
        averageResponseTimeMs:
          type: number
        errorRate:
          type: number
          format: float
        successRate:
          type: number
          format: float

    AnalysisMetrics:
      type: object
      properties:
        activeAnalyses:
          type: integer
        completedToday:
          type: integer
        averageAnalysisTime:
          type: number
        queuedAnalyses:
          type: integer

    ResourceMetrics:
      type: object
      properties:
        cpuUsagePercent:
          type: number
        memoryUsagePercent:
          type: number
        diskUsagePercent:
          type: number
        networkIoMbps:
          type: number

    QueueMetrics:
      type: object
      properties:
        totalQueuedTasks:
          type: integer
        averageWaitTimeSeconds:
          type: number
        oldestQueuedTaskSeconds:
          type: number

    # Request Types for Various Operations
    ScenarioGenerationRequest:
      type: object
      required:
        - baseEventId
        - count
      properties:
        baseEventId:
          type: string
        count:
          type: integer
          minimum: 1
          maximum: 100
        variationParameters:
          type: object

    PathOptimizationRequest:
      type: object
      required:
        - startNodeId
        - endNodeId
        - criteria
      properties:
        startNodeId:
          type: string
        endNodeId:
          type: string
        criteria:
          $ref: '#/components/schemas/OptimizationCriteria'

    RiskAnalysisRequest:
      type: object
      required:
        - decisionId
      properties:
        decisionId:
          type: string
        riskFramework:
          $ref: '#/components/schemas/RiskFramework'
        analysisDepth:
          type: integer
          default: 3

    CascadingEffectRequest:
      type: object
      required:
        - effectId
      properties:
        effectId:
          type: string
        propagationDepth:
          type: integer
          default: 5
        dampingFactors:
          type: array
          items:
            $ref: '#/components/schemas/DampingFactor'

    AlternativeComparisonRequest:
      type: object
      required:
        - alternativeIds
        - criteria
      properties:
        alternativeIds:
          type: array
          items:
            type: string
        criteria:
          $ref: '#/components/schemas/ComparisonCriteria'

    ScoreUpdateRequest:
      type: object
      required:
        - entityId
        - feedback
      properties:
        entityId:
          type: string
        feedback:
          $ref: '#/components/schemas/FeedbackIntegration'

    FeedbackSubmissionRequest:
      type: object
      required:
        - entityId
        - sourceType
        - feedbackType
      properties:
        entityId:
          type: string
        sourceType:
          $ref: '#/components/schemas/FeedbackSourceType'
        sourceId:
          type: string
        feedbackType:
          $ref: '#/components/schemas/FeedbackType'
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 10
        comments:
          type: string

    FrameworkCreateRequest:
      type: object
      required:
        - name
        - frameworkType
        - configuration
      properties:
        name:
          type: string
        frameworkType:
          $ref: '#/components/schemas/FrameworkType'
        configuration:
          type: object

    FrameworkUpdateRequest:
      type: object
      properties:
        name:
          type: string
        configuration:
          type: object
        isActive:
          type: boolean

    MetricCreateRequest:
      type: object
      required:
        - frameworkId
        - metricName
        - metricType
      properties:
        frameworkId:
          type: string
        metricName:
          type: string
        metricType:
          type: string
        formula:
          type: string
        weight:
          type: number
          format: float
          default: 1.0

    ExportRequest:
      type: object
      required:
        - analysisId
        - format
      properties:
        analysisId:
          type: string
        format:
          $ref: '#/components/schemas/ExportFormat'
        options:
          type: object

    ExportResult:
      type: object
      properties:
        exportId:
          type: string
        format:
          $ref: '#/components/schemas/ExportFormat'
        downloadUrl:
          type: string
        expiresAt:
          type: string
          format: date-time

    ExportFormat:
      type: string
      enum:
        - json
        - csv
        - xlsx
        - pdf
        - png
        - svg

    # Additional supporting types
    ScenarioSet:
      type: object
      properties:
        baseEventId:
          type: string
        scenarios:
          type: array
          items:
            $ref: '#/components/schemas/Scenario'
        metadata:
          type: object

    Scenario:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        parameters:
          type: object
        probability:
          type: number
          format: float

    OptimalPath:
      type: object
      properties:
        pathId:
          type: string
        nodes:
          type: array
          items:
            type: string
        totalCost:
          type: number
          format: float
        totalRisk:
          type: number
          format: float
        estimatedDuration:
          type: number
        optimizationScore:
          type: number
          format: float

    # Additional complex types for completeness
    MetricSet:
      type: object
      properties:
        primaryMetrics:
          type: array
          items:
            type: string
        secondaryMetrics:
          type: array
          items:
            type: string
        customMetrics:
          type: array
          items:
            $ref: '#/components/schemas/CustomMetric'
        weightingScheme:
          $ref: '#/components/schemas/WeightingScheme'

    CustomMetric:
      type: object
      properties:
        name:
          type: string
        formula:
          type: string
        weight:
          type: number
          format: float

    WeightingScheme:
      type: object
      properties:
        type:
          type: string
          enum:
            - equal
            - priority_based
            - dynamic
        weights:
          type: object

    ScoreContext:
      type: object
      properties:
        domain:
          type: string
        timePeriod:
          $ref: '#/components/schemas/TimePeriod'
        complexityLevel:
          type: string
          enum:
            - low
            - medium
            - high
            - critical
        stakeholderPerspective:
          type: string
        successCriteria:
          type: array
          items:
            type: string

    ResourceUsage:
      type: object
      properties:
        cpu:
          type: number
          format: float
        memory:
          type: number
          format: float
        storage:
          type: number
          format: float
        network:
          type: number
          format: float

    ConfidenceInterval:
      type: object
      properties:
        lower:
          type: number
          format: float
        upper:
          type: number
          format: float
        confidence:
          type: number
          format: float

  responses:
    BadRequest:
      description: Bad request - invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: [] 