openapi: 3.0.3
info:
  title: DADMS Parameter Manager Service API
  description: |
    Parameter Manager Service API for DADMS 2.0 - Centralized management of decision model parameters
    
    The Parameter Manager provides comprehensive parameter lifecycle management for the DADMS 
    Event-Driven System, enabling creation, versioning, validation, and traceability of 
    parameter sets used in simulations, analyses, and decision workflows.
    
    **Key Features:**
    - Centralized parameter storage and management
    - Immutable versioning for executed decisions
    - Advanced validation and constraint checking
    - Parameter templates and inheritance
    - Cross-parameter validation rules
    - Usage tracking and lineage
    - Schema-based parameter definition
    - Fork-based collaborative parameter development
    - Comprehensive audit trails
    
  version: "1.0.0"
  contact:
    name: DADMS Development Team
    email: dev@dadms.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3013
    description: Local development
  - url: https://api.dadms.dev/parameter-manager
    description: Development environment
  - url: https://api.dadms.com/parameter-manager
    description: Production environment

security:
  - BearerAuth: []

tags:
  - name: Parameter Sets
    description: Parameter set management operations
  - name: Parameters
    description: Individual parameter management within sets
  - name: Validation
    description: Parameter validation and quality assurance
  - name: Schemas
    description: Parameter schema management
  - name: Templates
    description: Parameter template operations
  - name: Versions
    description: Version control and history management
  - name: Usage & Lineage
    description: Parameter usage tracking and lineage
  - name: Search & Discovery
    description: Parameter search and discovery operations
  - name: Import & Export
    description: Parameter set import and export
  - name: Health & Monitoring
    description: Service health and performance monitoring

paths:
  # Parameter Set Management
  /parameter-sets:
    post:
      tags:
        - Parameter Sets
      summary: Register new parameter set
      description: Create a new parameter set with validation
      operationId: registerParameterSet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParameterSetRequest'
            examples:
              simulation_parameters:
                summary: Physics simulation parameters
                value:
                  name: "Aircraft Dynamics Model v1.0"
                  description: "Parameter set for aircraft dynamics simulation"
                  domain: "aviation"
                  category: "simulation"
                  parameters:
                    gravity:
                      name: "gravity"
                      description: "Gravitational acceleration"
                      type: "number"
                      value: 9.81
                      unit: "meter_per_second_squared"
                      parameter_class: "constant"
                      source_type: "default"
                      constraints:
                        min_value: 9.0
                        max_value: 10.0
                      is_required: true
                      is_configurable: false
                    air_density:
                      name: "air_density"
                      description: "Air density at sea level"
                      type: "number"
                      value: 1.225
                      unit: "kilogram_per_cubic_meter"
                      parameter_class: "independent"
                      source_type: "environmental"
                      constraints:
                        min_value: 0.5
                        max_value: 2.0
                      is_required: true
                      is_configurable: true
                  tags: ["aviation", "physics", "simulation"]
                  usage_context: ["flight_simulation", "aerodynamics"]
      responses:
        '201':
          description: Parameter set created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterSetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      tags:
        - Parameter Sets
      summary: List parameter sets
      description: Retrieve parameter sets with optional filtering
      operationId: listParameterSets
      parameters:
        - name: domain
          in: query
          description: Filter by domain
          schema:
            type: string
        - name: category
          in: query
          description: Filter by category
          schema:
            $ref: '#/components/schemas/ParameterCategory'
        - name: tags
          in: query
          description: Filter by tags
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: status
          in: query
          description: Filter by status
          schema:
            $ref: '#/components/schemas/ParameterSetStatus'
        - name: author
          in: query
          description: Filter by author
          schema:
            type: string
        - name: search_term
          in: query
          description: Search in name and description
          schema:
            type: string
        - name: created_after
          in: query
          description: Filter by creation date (after)
          schema:
            type: string
            format: date-time
        - name: created_before
          in: query
          description: Filter by creation date (before)
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Parameter sets retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  parameter_sets:
                    type: array
                    items:
                      $ref: '#/components/schemas/ParameterSetSummary'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
                  has_more:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}:
    get:
      tags:
        - Parameter Sets
      summary: Get parameter set
      description: Retrieve a specific parameter set by ID
      operationId: getParameterSet
      parameters:
        - name: id
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
        - name: version
          in: query
          description: Specific version to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Parameter set retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterSet'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

    put:
      tags:
        - Parameter Sets
      summary: Update parameter set
      description: Update an existing parameter set
      operationId: updateParameterSet
      parameters:
        - name: id
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParameterSetUpdate'
      responses:
        '200':
          description: Parameter set updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterSetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Parameter set is locked and cannot be updated
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      tags:
        - Parameter Sets
      summary: Delete parameter set
      description: Delete a parameter set (only if not used in any decisions)
      operationId: deleteParameterSet
      parameters:
        - name: id
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Parameter set deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Parameter set cannot be deleted due to existing usage
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}/fork:
    post:
      tags:
        - Parameter Sets
      summary: Fork parameter set
      description: Create a new parameter set based on an existing one
      operationId: forkParameterSet
      parameters:
        - name: id
          in: path
          required: true
          description: Source parameter set ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForkRequest'
            example:
              name: "Aircraft Dynamics Model v1.1"
              description: "Updated model with improved air resistance calculations"
              reason: "Performance optimization for high-altitude scenarios"
              modifications:
                air_density:
                  value: 1.200
                drag_coefficient:
                  value: 0.025
      responses:
        '201':
          description: Parameter set forked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterSetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}/lock:
    post:
      tags:
        - Parameter Sets
      summary: Lock parameter set
      description: Make parameter set immutable for executed decisions
      operationId: lockParameterSet
      parameters:
        - name: id
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lock_reason:
                  type: string
                  description: Reason for locking the parameter set
              required:
                - lock_reason
            example:
              lock_reason: "Used in production simulation run #12345"
      responses:
        '200':
          description: Parameter set locked successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Parameter set is already locked
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}/archive:
    post:
      tags:
        - Parameter Sets
      summary: Archive parameter set
      description: Archive a parameter set for historical purposes
      operationId: archiveParameterSet
      parameters:
        - name: id
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                archive_reason:
                  type: string
                  description: Reason for archiving
              required:
                - archive_reason
      responses:
        '200':
          description: Parameter set archived successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}/compare:
    get:
      tags:
        - Parameter Sets
      summary: Compare parameter sets
      description: Compare two parameter sets to identify differences
      operationId: compareParameterSets
      parameters:
        - name: id
          in: path
          required: true
          description: First parameter set ID
          schema:
            type: string
            format: uuid
        - name: compare_with
          in: query
          required: true
          description: Second parameter set ID to compare with
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Comparison completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterSetComparison'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Parameter Management
  /parameter-sets/{setId}/parameters:
    post:
      tags:
        - Parameters
      summary: Add parameter to set
      description: Add a new parameter to an existing parameter set
      operationId: addParameter
      parameters:
        - name: setId
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Parameter'
      responses:
        '201':
          description: Parameter added successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Parameter already exists or set is locked
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{setId}/parameters/{paramName}:
    put:
      tags:
        - Parameters
      summary: Update parameter
      description: Update an existing parameter in a parameter set
      operationId: updateParameter
      parameters:
        - name: setId
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
        - name: paramName
          in: path
          required: true
          description: Parameter name
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParameterUpdate'
      responses:
        '200':
          description: Parameter updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Parameter set is locked
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      tags:
        - Parameters
      summary: Remove parameter
      description: Remove a parameter from a parameter set
      operationId: removeParameter
      parameters:
        - name: setId
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
        - name: paramName
          in: path
          required: true
          description: Parameter name
          schema:
            type: string
      responses:
        '204':
          description: Parameter removed successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Parameter set is locked or parameter is required
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{setId}/parameters/{paramName}/validate:
    post:
      tags:
        - Parameters
      summary: Validate parameter
      description: Validate a specific parameter within a set
      operationId: validateParameter
      parameters:
        - name: setId
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
        - name: paramName
          in: path
          required: true
          description: Parameter name
          schema:
            type: string
      responses:
        '200':
          description: Parameter validation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterValidationResult'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Validation
  /parameter-sets/{id}/validate:
    post:
      tags:
        - Validation
      summary: Validate parameter set
      description: Validate an entire parameter set including cross-parameter rules
      operationId: validateParameterSet
      parameters:
        - name: id
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Validation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}/validate-values:
    post:
      tags:
        - Validation
      summary: Validate parameter values
      description: Validate specific parameter values against the parameter set definition
      operationId: validateParameterValues
      parameters:
        - name: id
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              description: Parameter values to validate
            example:
              gravity: 9.81
              air_density: 1.225
              wing_span: 35.0
              max_altitude: 12000
      responses:
        '200':
          description: Value validation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}/suggest-values:
    post:
      tags:
        - Validation
      summary: Suggest parameter values
      description: Get intelligent suggestions for parameter values based on context
      operationId: suggestParameterValues
      parameters:
        - name: id
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationContext'
      responses:
        '200':
          description: Parameter suggestions generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterSuggestions'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Schema Management
  /schemas:
    post:
      tags:
        - Schemas
      summary: Register parameter schema
      description: Register a new parameter schema definition
      operationId: registerSchema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParameterSchema'
            example:
              name: "Physics Simulation Schema"
              version: "1.0"
              description: "Standard schema for physics-based simulations"
              schema_type: "strict"
              parameter_definitions:
                gravity:
                  type: "number"
                  description: "Gravitational acceleration"
                  constraints:
                    min_value: 8.0
                    max_value: 12.0
                  metadata:
                    unit: "meter_per_second_squared"
                    category: "physical_constant"
                air_density:
                  type: "number"
                  description: "Air density"
                  constraints:
                    min_value: 0.1
                    max_value: 3.0
              required_parameters: ["gravity"]
              domain: "physics"
              category: "simulation"
      responses:
        '201':
          description: Schema registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Schema already exists
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      tags:
        - Schemas
      summary: List parameter schemas
      description: Retrieve parameter schemas with optional filtering
      operationId: listSchemas
      parameters:
        - name: domain
          in: query
          description: Filter by domain
          schema:
            type: string
        - name: category
          in: query
          description: Filter by category
          schema:
            $ref: '#/components/schemas/ParameterCategory'
        - name: status
          in: query
          description: Filter by status
          schema:
            $ref: '#/components/schemas/SchemaStatus'
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Schemas retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  schemas:
                    type: array
                    items:
                      $ref: '#/components/schemas/SchemaSummary'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /schemas/{schemaId}:
    get:
      tags:
        - Schemas
      summary: Get parameter schema
      description: Retrieve a specific parameter schema
      operationId: getSchema
      parameters:
        - name: schemaId
          in: path
          required: true
          description: Schema ID
          schema:
            type: string
            format: uuid
        - name: version
          in: query
          description: Specific schema version
          schema:
            type: string
      responses:
        '200':
          description: Schema retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterSchema'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}/validate-schema:
    post:
      tags:
        - Schemas
      summary: Validate against schema
      description: Validate a parameter set against a specific schema
      operationId: validateAgainstSchema
      parameters:
        - name: id
          in: path
          required: true
          description: Parameter set ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                schema_id:
                  type: string
                  format: uuid
                  description: Schema ID to validate against
              required:
                - schema_id
      responses:
        '200':
          description: Schema validation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationResult'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Templates
  /templates:
    post:
      tags:
        - Templates
      summary: Create parameter template
      description: Create a new parameter template for reuse
      operationId: createTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParameterTemplate'
      responses:
        '201':
          description: Template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Template already exists
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      tags:
        - Templates
      summary: List parameter templates
      description: Retrieve parameter templates with optional filtering
      operationId: listTemplates
      parameters:
        - name: category
          in: query
          schema:
            $ref: '#/components/schemas/ParameterCategory'
        - name: is_active
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Templates retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  templates:
                    type: array
                    items:
                      $ref: '#/components/schemas/TemplateSummary'
                  total:
                    type: integer
        '500':
          $ref: '#/components/responses/InternalError'

  /templates/{templateId}:
    get:
      tags:
        - Templates
      summary: Get parameter template
      description: Retrieve a specific parameter template
      operationId: getTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Template retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterTemplate'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /templates/{templateId}/instantiate:
    post:
      tags:
        - Templates
      summary: Instantiate template
      description: Create a parameter set from a template
      operationId: instantiateFromTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name for the new parameter set
                description:
                  type: string
                  description: Description for the new parameter set
                overrides:
                  type: object
                  additionalProperties: true
                  description: Parameter value overrides
              required:
                - name
      responses:
        '201':
          description: Parameter set created from template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterSetResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Version Management
  /parameter-sets/{id}/versions:
    get:
      tags:
        - Versions
      summary: Get version history
      description: Retrieve version history for a parameter set
      operationId: getVersionHistory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Version history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      $ref: '#/components/schemas/ParameterVersion'
                  total:
                    type: integer
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      tags:
        - Versions
      summary: Create version
      description: Create a new version of a parameter set
      operationId: createVersion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionRequest'
      responses:
        '201':
          description: Version created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterVersion'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}/versions/{versionId}:
    get:
      tags:
        - Versions
      summary: Get specific version
      description: Retrieve a specific version of a parameter set
      operationId: getVersion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: versionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Version retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterVersion'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}/rollback:
    post:
      tags:
        - Versions
      summary: Rollback to version
      description: Rollback parameter set to a previous version
      operationId: rollbackToVersion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                version_id:
                  type: string
                  format: uuid
                  description: Version to rollback to
                rollback_reason:
                  type: string
                  description: Reason for rollback
              required:
                - version_id
                - rollback_reason
      responses:
        '200':
          description: Rollback completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterSetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Parameter set is locked or in use
        '500':
          $ref: '#/components/responses/InternalError'

  # Usage & Lineage
  /parameter-sets/{id}/usage:
    get:
      tags:
        - Usage & Lineage
      summary: Get usage history
      description: Retrieve usage history for a parameter set
      operationId: getUsageHistory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: start_date
          in: query
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          schema:
            type: string
            format: date-time
        - name: used_by_service
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Usage history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  usage_records:
                    type: array
                    items:
                      $ref: '#/components/schemas/UsageRecord'
                  total:
                    type: integer
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}/parameters/{paramName}/lineage:
    get:
      tags:
        - Usage & Lineage
      summary: Get parameter lineage
      description: Get lineage information for a specific parameter
      operationId: getParameterLineage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: paramName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Parameter lineage retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterLineage'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /decisions/{decisionId}/parameters:
    get:
      tags:
        - Usage & Lineage
      summary: Find parameters used in decision
      description: Find all parameters used in a specific decision
      operationId: findParametersUsedInDecision
      parameters:
        - name: decisionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Parameters used in decision retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParameterUsageSummary'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Search & Discovery
  /search/parameters:
    get:
      tags:
        - Search & Discovery
      summary: Search parameters
      description: Search for parameters across all parameter sets
      operationId: searchParameters
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
        - name: type
          in: query
          description: Filter by parameter type
          schema:
            $ref: '#/components/schemas/ParameterType'
        - name: domain
          in: query
          description: Filter by domain
          schema:
            type: string
        - name: tags
          in: query
          description: Filter by tags
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ParameterSearchResult'
                  total:
                    type: integer
                  query_time_ms:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameters/by-tags:
    get:
      tags:
        - Search & Discovery
      summary: Get parameters by tags
      description: Find parameters that match specific tags
      operationId: getParametersByTag
      parameters:
        - name: tags
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: match_all
          in: query
          description: Whether to match all tags (AND) or any tag (OR)
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Parameters retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParameterSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/{id}/similar:
    get:
      tags:
        - Search & Discovery
      summary: Get similar parameter sets
      description: Find parameter sets similar to the specified one
      operationId: getSimilarParameterSets
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: similarity_threshold
          in: query
          description: Minimum similarity score (0.0 - 1.0)
          schema:
            type: number
            minimum: 0.0
            maximum: 1.0
            default: 0.7
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Similar parameter sets retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimilarityResult'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # Import & Export
  /parameter-sets/{id}/export:
    get:
      tags:
        - Import & Export
      summary: Export parameter set
      description: Export a parameter set in various formats
      operationId: exportParameterSet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: format
          in: query
          required: true
          description: Export format
          schema:
            $ref: '#/components/schemas/ExportFormat'
        - name: include_metadata
          in: query
          description: Include metadata in export
          schema:
            type: boolean
            default: true
        - name: include_history
          in: query
          description: Include version history
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Parameter set exported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportResult'
            application/yaml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /parameter-sets/import:
    post:
      tags:
        - Import & Export
      summary: Import parameter set
      description: Import a parameter set from external format
      operationId: importParameterSet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRequest'
          application/yaml:
            schema:
              type: string
          text/csv:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Parameter set imported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterSetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'

  # Health & Monitoring
  /health:
    get:
      tags:
        - Health & Monitoring
      summary: Service health check
      description: Get service health status
      operationId: getHealth
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /metrics:
    get:
      tags:
        - Health & Monitoring
      summary: Service metrics
      description: Get service performance metrics
      operationId: getMetrics
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterManagerMetrics'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Core Models
    ParameterSet:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique parameter set identifier
        name:
          type: string
          description: Human-readable name
        description:
          type: string
          description: Detailed description
        version:
          type: string
          description: Semantic version
        domain:
          type: string
          description: Domain classification
        category:
          $ref: '#/components/schemas/ParameterCategory'
        tags:
          type: array
          items:
            type: string
          description: Semantic tags
        parameters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Parameter'
          description: Parameter definitions
        parameter_groups:
          type: array
          items:
            $ref: '#/components/schemas/ParameterGroup'
        schema_version:
          type: string
          description: Associated schema version
        validation_rules:
          type: array
          items:
            $ref: '#/components/schemas/ValidationRule'
        author:
          type: string
          description: Creator identifier
        organization:
          type: string
          description: Owning organization
        source_provenance:
          type: string
          description: Data source/derivation
        usage_context:
          type: array
          items:
            type: string
          description: Intended use cases
        status:
          $ref: '#/components/schemas/ParameterSetStatus'
        is_immutable:
          type: boolean
          description: Whether set is frozen
        parent_set_id:
          type: string
          format: uuid
          description: For forked/derived sets
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        locked_at:
          type: string
          format: date-time
          description: When set became immutable
        archived_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - description
        - version
        - domain
        - category
        - parameters
        - author
        - status
        - created_at
        - updated_at

    Parameter:
      type: object
      properties:
        name:
          type: string
          description: Parameter name/key
        display_name:
          type: string
          description: Human-readable name
        description:
          type: string
          description: Parameter description
        type:
          $ref: '#/components/schemas/ParameterType'
        value:
          description: Current/default value
        unit:
          type: string
          description: Unit of measurement
        parameter_class:
          $ref: '#/components/schemas/ParameterClass'
        source_type:
          $ref: '#/components/schemas/ParameterSourceType'
        constraints:
          $ref: '#/components/schemas/ParameterConstraints'
        validation_function:
          type: string
          description: Custom validation function
        depends_on:
          type: array
          items:
            type: string
          description: Parameter dependencies
        derived_from:
          $ref: '#/components/schemas/DerivedDefinition'
        tags:
          type: array
          items:
            type: string
          description: Semantic tags
        sensitivity_level:
          $ref: '#/components/schemas/SensitivityLevel'
        documentation_url:
          type: string
          format: uri
          description: Reference documentation
        is_required:
          type: boolean
          description: Whether parameter is mandatory
        is_configurable:
          type: boolean
          description: Whether user can modify
        default_value:
          description: Default if not specified
        last_validated_at:
          type: string
          format: date-time
        validation_status:
          $ref: '#/components/schemas/ValidationStatus'
      required:
        - name
        - description
        - type
        - parameter_class
        - source_type
        - constraints
        - sensitivity_level
        - is_required
        - is_configurable
        - validation_status

    ParameterCategory:
      type: string
      enum:
        - simulation
        - analysis
        - scoring
        - physics
        - economic
        - statistical
        - ontology
        - workflow
        - custom

    ParameterSetStatus:
      type: string
      enum:
        - draft
        - active
        - deprecated
        - archived
        - locked

    ParameterType:
      type: string
      enum:
        - number
        - integer
        - float
        - string
        - boolean
        - enum
        - array
        - object
        - date
        - duration
        - unit_value

    ParameterClass:
      type: string
      enum:
        - independent
        - dependent
        - computed
        - constant

    ParameterSourceType:
      type: string
      enum:
        - user_input
        - environmental
        - model_output
        - calculated
        - lookup
        - default
        - inherited

    SensitivityLevel:
      type: string
      enum:
        - public
        - internal
        - confidential
        - classified

    ValidationStatus:
      type: string
      enum:
        - valid
        - invalid
        - warning
        - pending
        - unknown

    ParameterConstraints:
      type: object
      properties:
        min_value:
          type: number
          description: Minimum numeric value
        max_value:
          type: number
          description: Maximum numeric value
        step:
          type: number
          description: Increment step
        precision:
          type: integer
          description: Decimal places
        min_length:
          type: integer
          description: Minimum string length
        max_length:
          type: integer
          description: Maximum string length
        pattern:
          type: string
          description: Regex pattern
        format:
          $ref: '#/components/schemas/StringFormat'
        min_items:
          type: integer
          description: Minimum array items
        max_items:
          type: integer
          description: Maximum array items
        unique_items:
          type: boolean
          description: Array items must be unique
        item_type:
          $ref: '#/components/schemas/ParameterType'
        allowed_values:
          type: array
          description: Enum values
        conditional_rules:
          type: array
          items:
            $ref: '#/components/schemas/ConditionalRule'
        custom_validators:
          type: array
          items:
            type: string
          description: Custom validation functions

    StringFormat:
      type: string
      enum:
        - email
        - url
        - uuid
        - date-iso
        - time-iso
        - regex

    ConditionalRule:
      type: object
      properties:
        condition:
          type: string
          description: Condition expression
        then_constraint:
          $ref: '#/components/schemas/ParameterConstraints'
        else_constraint:
          $ref: '#/components/schemas/ParameterConstraints'
        description:
          type: string
      required:
        - condition
        - then_constraint
        - description

    DerivedDefinition:
      type: object
      properties:
        base_parameters:
          type: array
          items:
            type: string
          description: Parameters this is derived from
        derivation_formula:
          type: string
          description: Mathematical formula
        derivation_function:
          type: string
          description: Function name for derivation
        update_trigger:
          type: string
          enum:
            - automatic
            - manual
            - on_change
          description: When to update derived value
      required:
        - base_parameters

    ParameterGroup:
      type: object
      properties:
        name:
          type: string
          description: Group name
        description:
          type: string
          description: Group description
        parameters:
          type: array
          items:
            type: string
          description: Parameter names in group
        display_order:
          type: integer
          description: Display order
      required:
        - name
        - parameters

    ValidationRule:
      type: object
      properties:
        rule_id:
          type: string
          description: Rule identifier
        description:
          type: string
          description: Rule description
        rule_expression:
          type: string
          description: Rule expression/formula
        error_message:
          type: string
          description: Error message if violated
        validation_level:
          type: string
          enum:
            - error
            - warning
            - info
          description: Validation severity
      required:
        - rule_id
        - description
        - rule_expression
        - validation_level

    # Request/Response Models
    ParameterSetRequest:
      type: object
      properties:
        name:
          type: string
          description: Parameter set name
        description:
          type: string
          description: Parameter set description
        domain:
          type: string
          description: Domain classification
        category:
          $ref: '#/components/schemas/ParameterCategory'
        parameters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Parameter'
          description: Parameter definitions
        tags:
          type: array
          items:
            type: string
          description: Semantic tags
        usage_context:
          type: array
          items:
            type: string
          description: Intended use cases
        template_id:
          type: string
          format: uuid
          description: Template to base on
      required:
        - name
        - description
        - domain
        - category
        - parameters

    ParameterSetResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        parameter_set:
          $ref: '#/components/schemas/ParameterSet'
        validation_result:
          $ref: '#/components/schemas/ValidationResult'
        created_at:
          type: string
          format: date-time
      required:
        - id
        - parameter_set
        - validation_result
        - created_at

    ParameterSetUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        parameters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Parameter'
        tags:
          type: array
          items:
            type: string
        add_parameters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Parameter'
        remove_parameters:
          type: array
          items:
            type: string
        update_parameters:
          type: object
          additionalProperties:
            type: object

    ParameterUpdate:
      type: object
      properties:
        value:
          description: New parameter value
        description:
          type: string
        constraints:
          $ref: '#/components/schemas/ParameterConstraints'
        tags:
          type: array
          items:
            type: string
        is_configurable:
          type: boolean

    ForkRequest:
      type: object
      properties:
        name:
          type: string
          description: Name for forked parameter set
        description:
          type: string
          description: Description for forked parameter set
        reason:
          type: string
          description: Reason for forking
        modifications:
          type: object
          additionalProperties: true
          description: Parameter modifications
      required:
        - name
        - description
        - reason

    ParameterSetSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        version:
          type: string
        domain:
          type: string
        category:
          $ref: '#/components/schemas/ParameterCategory'
        status:
          $ref: '#/components/schemas/ParameterSetStatus'
        parameter_count:
          type: integer
        author:
          type: string
        tags:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ParameterSetComparison:
      type: object
      properties:
        set1_id:
          type: string
          format: uuid
        set2_id:
          type: string
          format: uuid
        differences:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDifference'
        similarity_score:
          type: number
          minimum: 0
          maximum: 1
        compatibility_assessment:
          $ref: '#/components/schemas/CompatibilityAssessment'
      required:
        - set1_id
        - set2_id
        - differences
        - similarity_score

    ParameterDifference:
      type: object
      properties:
        parameter_name:
          type: string
        difference_type:
          type: string
          enum:
            - added
            - removed
            - modified
            - value_changed
        set1_value:
          description: Value in first set
        set2_value:
          description: Value in second set
        impact_level:
          type: string
          enum:
            - critical
            - major
            - minor
            - none
      required:
        - parameter_name
        - difference_type
        - impact_level

    CompatibilityAssessment:
      type: object
      properties:
        is_compatible:
          type: boolean
        compatibility_score:
          type: number
          minimum: 0
          maximum: 1
        breaking_changes:
          type: array
          items:
            type: string
        migration_required:
          type: boolean
        migration_suggestions:
          type: array
          items:
            type: string

    # Validation Models
    ValidationResult:
      type: object
      properties:
        is_valid:
          type: boolean
        overall_score:
          type: number
          minimum: 0
          maximum: 1
        validation_summary:
          $ref: '#/components/schemas/ValidationSummary'
        parameter_results:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ParameterValidationResult'
        cross_validation_results:
          $ref: '#/components/schemas/CrossValidationResult'
        schema_validation:
          $ref: '#/components/schemas/SchemaValidationResult'
        recommendations:
          type: array
          items:
            $ref: '#/components/schemas/ValidationRecommendation'
      required:
        - is_valid
        - overall_score
        - validation_summary

    ValidationSummary:
      type: object
      properties:
        total_parameters:
          type: integer
        valid_parameters:
          type: integer
        invalid_parameters:
          type: integer
        warning_parameters:
          type: integer
        error_count:
          type: integer
        warning_count:
          type: integer
      required:
        - total_parameters
        - valid_parameters
        - invalid_parameters
        - warning_parameters
        - error_count
        - warning_count

    ParameterValidationResult:
      type: object
      properties:
        parameter_name:
          type: string
        is_valid:
          type: boolean
        validation_errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        validation_warnings:
          type: array
          items:
            $ref: '#/components/schemas/ValidationWarning'
        constraint_violations:
          type: array
          items:
            $ref: '#/components/schemas/ConstraintViolation'
        suggestions:
          type: array
          items:
            type: string
      required:
        - parameter_name
        - is_valid

    ValidationError:
      type: object
      properties:
        error_code:
          type: string
        error_message:
          type: string
        parameter_path:
          type: string
        current_value:
          description: Current value
        expected_constraint:
          type: string
        severity:
          type: string
          enum:
            - critical
            - high
            - medium
            - low
      required:
        - error_code
        - error_message
        - severity

    ValidationWarning:
      type: object
      properties:
        warning_code:
          type: string
        warning_message:
          type: string
        parameter_path:
          type: string
        recommendation:
          type: string
      required:
        - warning_code
        - warning_message

    ConstraintViolation:
      type: object
      properties:
        constraint_type:
          type: string
        constraint_description:
          type: string
        current_value:
          description: Current value
        expected_value:
          description: Expected value or range
        can_auto_fix:
          type: boolean
        suggested_fix:
          type: string
      required:
        - constraint_type
        - constraint_description
        - can_auto_fix

    CrossValidationResult:
      type: object
      properties:
        is_valid:
          type: boolean
        rule_results:
          type: array
          items:
            $ref: '#/components/schemas/RuleValidationResult'
        dependency_violations:
          type: array
          items:
            $ref: '#/components/schemas/DependencyViolation'
      required:
        - is_valid

    RuleValidationResult:
      type: object
      properties:
        rule_id:
          type: string
        rule_description:
          type: string
        is_satisfied:
          type: boolean
        violation_message:
          type: string
        affected_parameters:
          type: array
          items:
            type: string
      required:
        - rule_id
        - is_satisfied

    DependencyViolation:
      type: object
      properties:
        dependent_parameter:
          type: string
        missing_dependencies:
          type: array
          items:
            type: string
        circular_dependencies:
          type: array
          items:
            type: string
      required:
        - dependent_parameter

    ValidationRecommendation:
      type: object
      properties:
        recommendation_id:
          type: string
        recommendation_type:
          type: string
          enum:
            - fix_value
            - adjust_constraint
            - add_parameter
            - remove_parameter
            - update_dependency
        description:
          type: string
        affected_parameters:
          type: array
          items:
            type: string
        auto_applicable:
          type: boolean
        priority:
          type: string
          enum:
            - high
            - medium
            - low
      required:
        - recommendation_id
        - recommendation_type
        - description
        - auto_applicable
        - priority

    ValidationContext:
      type: object
      properties:
        usage_context:
          type: string
          description: How parameters will be used
        target_domain:
          type: string
          description: Target domain
        performance_requirements:
          type: object
          description: Performance constraints
        regulatory_requirements:
          type: array
          items:
            type: string
          description: Regulatory constraints

    ParameterSuggestions:
      type: object
      properties:
        suggested_values:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ValueSuggestion'
        confidence_scores:
          type: object
          additionalProperties:
            type: number
        reasoning:
          type: object
          additionalProperties:
            type: string
        alternative_configurations:
          type: array
          items:
            $ref: '#/components/schemas/AlternativeConfiguration'

    ValueSuggestion:
      type: object
      properties:
        suggested_value:
          description: Suggested parameter value
        confidence:
          type: number
          minimum: 0
          maximum: 1
        reasoning:
          type: string
        source:
          type: string
          enum:
            - historical_data
            - similar_parameters
            - domain_knowledge
            - machine_learning
            - user_preference

    AlternativeConfiguration:
      type: object
      properties:
        configuration_name:
          type: string
        parameter_values:
          type: object
          additionalProperties: true
        expected_performance:
          type: string
        trade_offs:
          type: string

    # Schema Models
    ParameterSchema:
      type: object
      properties:
        schema_id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        description:
          type: string
        schema_type:
          $ref: '#/components/schemas/SchemaType'
        parameter_definitions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ParameterSchemaDefinition'
        required_parameters:
          type: array
          items:
            type: string
        global_constraints:
          type: array
          items:
            $ref: '#/components/schemas/GlobalConstraint'
        conditional_rules:
          type: array
          items:
            $ref: '#/components/schemas/ConditionalRule'
        cross_parameter_rules:
          type: array
          items:
            $ref: '#/components/schemas/CrossParameterRule'
        domain:
          type: string
        category:
          $ref: '#/components/schemas/ParameterCategory'
        applicable_contexts:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/SchemaStatus'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - version
        - schema_type
        - parameter_definitions
        - status

    SchemaType:
      type: string
      enum:
        - strict
        - flexible
        - template
        - extensible

    SchemaStatus:
      type: string
      enum:
        - draft
        - active
        - deprecated
        - archived

    ParameterSchemaDefinition:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ParameterType'
        description:
          type: string
        constraints:
          $ref: '#/components/schemas/ParameterConstraints'
        metadata:
          $ref: '#/components/schemas/ParameterMetadata'
        examples:
          type: array
          description: Example values
      required:
        - type
        - description
        - constraints

    ParameterMetadata:
      type: object
      properties:
        unit:
          type: string
        category:
          type: string
        sensitivity:
          $ref: '#/components/schemas/SensitivityLevel'
        documentation_url:
          type: string
          format: uri
        related_standards:
          type: array
          items:
            type: string

    GlobalConstraint:
      type: object
      properties:
        constraint_id:
          type: string
        description:
          type: string
        constraint_expression:
          type: string
        error_message:
          type: string
      required:
        - constraint_id
        - description
        - constraint_expression

    CrossParameterRule:
      type: object
      properties:
        rule_id:
          type: string
        description:
          type: string
        parameters_involved:
          type: array
          items:
            type: string
        rule_expression:
          type: string
        validation_level:
          type: string
          enum:
            - error
            - warning
            - info
      required:
        - rule_id
        - description
        - parameters_involved
        - rule_expression
        - validation_level

    SchemaResponse:
      type: object
      properties:
        schema_id:
          type: string
          format: uuid
        schema:
          $ref: '#/components/schemas/ParameterSchema'
        validation_result:
          $ref: '#/components/schemas/ValidationResult'
        created_at:
          type: string
          format: date-time
      required:
        - schema_id
        - schema
        - created_at

    SchemaSummary:
      type: object
      properties:
        schema_id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        description:
          type: string
        schema_type:
          $ref: '#/components/schemas/SchemaType'
        parameter_count:
          type: integer
        status:
          $ref: '#/components/schemas/SchemaStatus'
        created_at:
          type: string
          format: date-time

    SchemaValidationResult:
      type: object
      properties:
        schema_id:
          type: string
          format: uuid
        is_compliant:
          type: boolean
        compliance_score:
          type: number
          minimum: 0
          maximum: 1
        missing_parameters:
          type: array
          items:
            type: string
        extra_parameters:
          type: array
          items:
            type: string
        constraint_violations:
          type: array
          items:
            $ref: '#/components/schemas/ConstraintViolation'
        recommendations:
          type: array
          items:
            type: string
      required:
        - schema_id
        - is_compliant
        - compliance_score

    # Template Models
    ParameterTemplate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        category:
          $ref: '#/components/schemas/ParameterCategory'
        parameter_definitions:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDefinition'
        required_parameters:
          type: array
          items:
            type: string
        optional_parameters:
          type: array
          items:
            type: string
        extends_template:
          type: string
          format: uuid
          description: Parent template
        overrides:
          type: object
          additionalProperties: true
          description: Parameter overrides
        usage_examples:
          type: array
          items:
            $ref: '#/components/schemas/ParameterSetExample'
        documentation:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - description
        - category
        - parameter_definitions
        - is_active

    ParameterDefinition:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/ParameterType'
        description:
          type: string
        constraints:
          $ref: '#/components/schemas/ParameterConstraints'
        default_value:
          description: Default value
        is_required:
          type: boolean
        group:
          type: string
      required:
        - name
        - type
        - description
        - is_required

    ParameterSetExample:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        use_case:
          type: string
        parameter_values:
          type: object
          additionalProperties: true
      required:
        - name
        - description
        - use_case
        - parameter_values

    TemplateResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        template:
          $ref: '#/components/schemas/ParameterTemplate'
        created_at:
          type: string
          format: date-time
      required:
        - id
        - template
        - created_at

    TemplateSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        category:
          $ref: '#/components/schemas/ParameterCategory'
        parameter_count:
          type: integer
        usage_count:
          type: integer
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    # Version Models
    ParameterVersion:
      type: object
      properties:
        version_id:
          type: string
          format: uuid
        parameter_set_id:
          type: string
          format: uuid
        version_number:
          type: string
        change_type:
          $ref: '#/components/schemas/ChangeType'
        change_summary:
          type: string
        change_justification:
          type: string
        breaking_changes:
          type: array
          items:
            type: string
        parent_version_id:
          type: string
          format: uuid
        fork_source_id:
          type: string
          format: uuid
        parameter_snapshot:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Parameter'
        schema_changes:
          type: array
          items:
            $ref: '#/components/schemas/SchemaChange'
        created_by:
          type: string
        approved_by:
          type: string
        change_request_id:
          type: string
        created_at:
          type: string
          format: date-time
        effective_date:
          type: string
          format: date-time
        usage_count:
          type: integer
        last_used_at:
          type: string
          format: date-time
      required:
        - version_id
        - parameter_set_id
        - version_number
        - change_type
        - change_summary
        - parameter_snapshot
        - created_by
        - created_at

    ChangeType:
      type: string
      enum:
        - major
        - minor
        - patch
        - hotfix
        - fork

    SchemaChange:
      type: object
      properties:
        parameter_name:
          type: string
        change_operation:
          type: string
          enum:
            - add
            - remove
            - modify
        old_definition:
          $ref: '#/components/schemas/Parameter'
        new_definition:
          $ref: '#/components/schemas/Parameter'
        impact_assessment:
          type: string
      required:
        - parameter_name
        - change_operation
        - impact_assessment

    VersionRequest:
      type: object
      properties:
        version_number:
          type: string
          description: Semantic version number
        change_type:
          $ref: '#/components/schemas/ChangeType'
        change_summary:
          type: string
          description: Brief summary of changes
        change_justification:
          type: string
          description: Detailed reasoning for changes
        breaking_changes:
          type: array
          items:
            type: string
          description: Description of breaking changes
        effective_date:
          type: string
          format: date-time
          description: When changes should take effect
      required:
        - change_type
        - change_summary
        - change_justification

    # Usage & Lineage Models
    UsageRecord:
      type: object
      properties:
        usage_id:
          type: string
          format: uuid
        parameter_set_id:
          type: string
          format: uuid
        version_id:
          type: string
          format: uuid
        used_by_service:
          type: string
        used_by_component:
          type: string
        usage_context:
          type: string
        parameters_accessed:
          type: array
          items:
            type: string
        decision_id:
          type: string
        simulation_id:
          type: string
        analysis_id:
          type: string
        used_at:
          type: string
          format: date-time
      required:
        - usage_id
        - parameter_set_id
        - used_by_service
        - used_at

    ParameterLineage:
      type: object
      properties:
        parameter_name:
          type: string
        parameter_set_id:
          type: string
          format: uuid
        origin:
          $ref: '#/components/schemas/ParameterOrigin'
        derivation_chain:
          type: array
          items:
            $ref: '#/components/schemas/DerivationStep'
        usage_history:
          type: array
          items:
            $ref: '#/components/schemas/UsageRecord'
        related_parameters:
          type: array
          items:
            $ref: '#/components/schemas/RelatedParameter'
        impact_analysis:
          $ref: '#/components/schemas/ImpactAnalysis'
      required:
        - parameter_name
        - parameter_set_id
        - origin

    ParameterOrigin:
      type: object
      properties:
        source_type:
          $ref: '#/components/schemas/ParameterSourceType'
        source_details:
          type: string
        original_value:
          description: Original parameter value
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        source_metadata:
          type: object
          additionalProperties: true
      required:
        - source_type
        - created_by
        - created_at

    DerivationStep:
      type: object
      properties:
        step_order:
          type: integer
        operation:
          type: string
        input_parameters:
          type: array
          items:
            type: string
        transformation_function:
          type: string
        intermediate_value:
          description: Value after this step
        performed_by:
          type: string
        performed_at:
          type: string
          format: date-time
      required:
        - step_order
        - operation
        - performed_at

    RelatedParameter:
      type: object
      properties:
        parameter_name:
          type: string
        parameter_set_id:
          type: string
          format: uuid
        relationship_type:
          type: string
          enum:
            - depends_on
            - derived_from
            - influences
            - correlated_with
        relationship_strength:
          type: number
          minimum: 0
          maximum: 1
        description:
          type: string
      required:
        - parameter_name
        - parameter_set_id
        - relationship_type

    ImpactAnalysis:
      type: object
      properties:
        downstream_parameters:
          type: array
          items:
            type: string
        affected_decisions:
          type: array
          items:
            type: string
        sensitivity_score:
          type: number
          minimum: 0
          maximum: 1
        change_propagation:
          type: array
          items:
            $ref: '#/components/schemas/ChangePropagation'
      required:
        - downstream_parameters
        - sensitivity_score

    ChangePropagation:
      type: object
      properties:
        target_parameter:
          type: string
        propagation_type:
          type: string
          enum:
            - automatic
            - manual
            - conditional
        estimated_impact:
          type: string
          enum:
            - high
            - medium
            - low
            - none
        requires_validation:
          type: boolean
      required:
        - target_parameter
        - propagation_type
        - estimated_impact
        - requires_validation

    ParameterUsageSummary:
      type: object
      properties:
        parameter_set_id:
          type: string
          format: uuid
        parameter_set_name:
          type: string
        version:
          type: string
        parameters_used:
          type: array
          items:
            type: string
        usage_context:
          type: string
        used_by_service:
          type: string
        decision_impact:
          type: string
          enum:
            - critical
            - high
            - medium
            - low
        used_at:
          type: string
          format: date-time
      required:
        - parameter_set_id
        - parameter_set_name
        - version
        - parameters_used
        - used_by_service
        - used_at

    # Search Models
    ParameterSearchResult:
      type: object
      properties:
        parameter_name:
          type: string
        parameter_set_id:
          type: string
          format: uuid
        parameter_set_name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/ParameterType'
        domain:
          type: string
        tags:
          type: array
          items:
            type: string
        relevance_score:
          type: number
          minimum: 0
          maximum: 1
        matched_fields:
          type: array
          items:
            type: string
        usage_frequency:
          type: integer
      required:
        - parameter_name
        - parameter_set_id
        - parameter_set_name
        - description
        - type
        - relevance_score

    ParameterSummary:
      type: object
      properties:
        parameter_name:
          type: string
        parameter_set_id:
          type: string
          format: uuid
        parameter_set_name:
          type: string
        type:
          $ref: '#/components/schemas/ParameterType'
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        last_used:
          type: string
          format: date-time
      required:
        - parameter_name
        - parameter_set_id
        - parameter_set_name
        - type
        - description

    SimilarityResult:
      type: object
      properties:
        parameter_set_id:
          type: string
          format: uuid
        parameter_set_name:
          type: string
        similarity_score:
          type: number
          minimum: 0
          maximum: 1
        matching_parameters:
          type: array
          items:
            type: string
        common_tags:
          type: array
          items:
            type: string
        compatibility_score:
          type: number
          minimum: 0
          maximum: 1
        difference_summary:
          type: string
      required:
        - parameter_set_id
        - parameter_set_name
        - similarity_score
        - matching_parameters

    # Import/Export Models
    ExportFormat:
      type: string
      enum:
        - json
        - yaml
        - csv
        - excel
        - xml

    ExportResult:
      type: object
      properties:
        format:
          $ref: '#/components/schemas/ExportFormat'
        content:
          type: string
          description: Exported content
        metadata:
          type: object
          properties:
            export_timestamp:
              type: string
              format: date-time
            parameter_set_id:
              type: string
              format: uuid
            version:
              type: string
            include_metadata:
              type: boolean
            include_history:
              type: boolean
        download_url:
          type: string
          format: uri
          description: URL to download the exported file
      required:
        - format
        - content
        - metadata

    ImportRequest:
      type: object
      properties:
        format:
          $ref: '#/components/schemas/ExportFormat'
        content:
          type: string
          description: Content to import
        name:
          type: string
          description: Name for imported parameter set
        description:
          type: string
          description: Description for imported parameter set
        domain:
          type: string
          description: Domain classification
        merge_strategy:
          type: string
          enum:
            - replace
            - merge
            - add_only
          description: How to handle conflicts
        validation_level:
          type: string
          enum:
            - strict
            - permissive
            - skip
          description: Validation strictness
      required:
        - format
        - content
        - name
        - description
        - domain

    # Health & Monitoring Models
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum:
            - healthy
            - degraded
            - unhealthy
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        uptime:
          type: integer
          description: Uptime in seconds
        components:
          type: object
          properties:
            database:
              type: string
              enum:
                - healthy
                - degraded
                - unhealthy
            cache:
              type: string
              enum:
                - healthy
                - degraded
                - unhealthy
            validation_engine:
              type: string
              enum:
                - healthy
                - degraded
                - unhealthy
            event_publisher:
              type: string
              enum:
                - healthy
                - degraded
                - unhealthy
          required:
            - database
            - cache
            - validation_engine
            - event_publisher
      required:
        - status
        - timestamp
        - version
        - uptime
        - components

    ParameterManagerMetrics:
      type: object
      properties:
        parameter_sets:
          type: object
          properties:
            total_count:
              type: integer
            active_count:
              type: integer
            locked_count:
              type: integer
            archived_count:
              type: integer
            created_last_24h:
              type: integer
            updated_last_24h:
              type: integer
        parameters:
          type: object
          properties:
            total_count:
              type: integer
            by_type:
              type: object
              additionalProperties:
                type: integer
            validation_success_rate:
              type: number
              minimum: 0
              maximum: 1
        validation:
          type: object
          properties:
            validations_last_24h:
              type: integer
            success_rate:
              type: number
              minimum: 0
              maximum: 1
            average_validation_time_ms:
              type: number
            constraint_violations_last_24h:
              type: integer
        usage:
          type: object
          properties:
            parameter_accesses_last_24h:
              type: integer
            unique_services_using:
              type: integer
            most_used_parameter_sets:
              type: array
              items:
                type: object
                properties:
                  parameter_set_id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  usage_count:
                    type: integer
        performance:
          type: object
          properties:
            avg_response_time_ms:
              type: number
            p95_response_time_ms:
              type: number
            requests_per_second:
              type: number
            cache_hit_rate:
              type: number
              minimum: 0
              maximum: 1
        collected_at:
          type: string
          format: date-time
      required:
        - parameter_sets
        - parameters
        - validation
        - usage
        - performance
        - collected_at

    # Common Response Models
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
      required:
        - success
        - message

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
      required:
        - success
        - error
        - message
        - timestamp

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "BAD_REQUEST"
            message: "Invalid request parameters"
            timestamp: "2025-01-15T14:35:12Z"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "UNAUTHORIZED"
            message: "Authentication required"
            timestamp: "2025-01-15T14:35:12Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "NOT_FOUND"
            message: "Parameter set not found"
            timestamp: "2025-01-15T14:35:12Z"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  validation_errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ValidationError'
          example:
            success: false
            error: "VALIDATION_ERROR"
            message: "Parameter validation failed"
            validation_errors:
              - error_code: "CONSTRAINT_VIOLATION"
                error_message: "Value exceeds maximum allowed"
                parameter_path: "gravity"
                current_value: 15.0
                expected_constraint: "max_value: 10.0"
                severity: "high"
            timestamp: "2025-01-15T14:35:12Z"

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "INTERNAL_ERROR"
            message: "An unexpected error occurred"
            timestamp: "2025-01-15T14:35:12Z" 