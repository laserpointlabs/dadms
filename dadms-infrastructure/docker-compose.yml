version: '3.8'

services:
  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15
    container_name: dadms-postgres
    environment:
      POSTGRES_DB: dadms
      POSTGRES_USER: dadms_user
      POSTGRES_PASSWORD: dadms_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dadms_user -d dadms" ]
      interval: 10s
      timeout: 5s
      retries: 20

  # Qdrant - Vector Database for RAG
  qdrant:
    image: qdrant/qdrant:latest
    container_name: dadms-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:6333/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 20

  # Redis - Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: dadms-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 20

  # Camunda BPM Platform - Process Engine (7.15.0 does not work)
  camunda:
    image: docker.io/camunda/camunda-bpm-platform:7.18.0
    container_name: camunda
    ports:
      - "8080:8080"
    environment:
      - DB_DRIVER=org.postgresql.Driver
      - DB_URL=jdbc:postgresql://postgres:5432/dadms
      - DB_USERNAME=dadms_user
      - DB_PASSWORD=dadms_password
      - TZ=UTC
    volumes:
      - camunda_data:/camunda/data
    networks:
      - default
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/engine-rest/engine" ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Ollama - Local LLM Server
  ollama:
    image: docker.io/ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434" ]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - default
    volumes:
      - ollama_data:/root/.ollama

  # # Development Services
  # user-project-service:
  #   build: 
  #     context: ../dadms-services/user-project
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3001:3001"
  #   environment:
  #     - DATABASE_URL=postgresql://dadms_user:dadms_password@postgres:5432/dadms
  #   depends_on:
  #     - postgres
  #   networks:
  #     - default

  # llm-playground-service:
  #   build: 
  #     context: ../dadms-services/llm-playground
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3006:3006"
  #   environment:
  #     - NODE_ENV=development
  #     - DATABASE_URL=postgresql://dadms_user:dadms_password@postgres:5432/dadms
  #     - REDIS_URL=redis://redis:6379
  #     - MINIO_ENDPOINT=minio:9000
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
  #     - OLLAMA_ENDPOINT=http://ollama:11434
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #     ollama:
  #       condition: service_healthy

  # context-manager-service:
  #   build: 
  #     context: ../dadms-services/context-manager
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3020:3020"
  #   environment:
  #     - NODE_ENV=development
  #     - DATABASE_URL=postgresql://dadms_user:dadms_password@postgres:5432/dadms
  #     - REDIS_URL=redis://redis:6379
  #     - MINIO_ENDPOINT=minio:9000
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
  #     - OLLAMA_ENDPOINT=http://ollama:11434
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy

  # bpmn-workspace-service:
  #   build: 
  #     context: ../dadms-services/bpmn-workspace
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3021:3021"
  #   environment:
  #     - NODE_ENV=development
  #     - DATABASE_URL=postgresql://dadms_user:dadms_password@postgres:5432/dadms
  #     - REDIS_URL=redis://redis:6379
  #     - MINIO_ENDPOINT=minio:9000
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
  #     - AI_SUGGESTIONS_ENABLED=true
  #     - COLLABORATION_ENABLED=true
  #     - MAX_COLLABORATION_PARTICIPANTS=10
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy

  # process-manager-service:
  #   build: 
  #     context: ../dadms-services/process-manager
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3007:3007"
  #   environment:
  #     - NODE_ENV=development
  #     - DATABASE_URL=postgresql://dadms_user:dadms_password@postgres:5432/dadms
  #     - REDIS_URL=redis://redis:6379
  #     - CAMUNDA_REST_URL=http://camunda:8080/engine-rest
  #     - CAMUNDA_ADMIN_USER=demo
  #     - CAMUNDA_ADMIN_PASSWORD=demo
  #     - ENGINE_TYPE=camunda
  #     - ANALYTICS_ENABLED=true
  #     - AUDIT_ENABLED=true
  #     - INCIDENT_AUTO_RESOLUTION=true
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     camunda:
  #       condition: service_healthy

  # thread-manager-service:
  #   build: 
  #     context: ../dadms-services/thread-manager
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3008:3008"
  #   environment:
  #     - NODE_ENV=development
  #     - DATABASE_URL=postgresql://dadms_user:dadms_password@postgres:5432/dadms
  #     - REDIS_URL=redis://redis:6379
  #     - MINIO_ENDPOINT=minio:9000
  #     - QDRANT_URL=http://qdrant:6333
  #     - THREAD_TRACKING_ENABLED=true
  #     - FEEDBACK_ENABLED=true
  #     - SIMILARITY_ANALYSIS_ENABLED=true
  #     - IMPACT_ANALYSIS_ENABLED=true
  #     - ANALYTICS_ENABLED=true
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #     qdrant:
  #       condition: service_healthy

  # aads-service:
  #   build: 
  #     context: ../dadms-services/aads
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3005:3005"
  #   environment:
  #     - NODE_ENV=development
  #     - DATABASE_URL=postgresql://dadms_user:dadms_password@postgres:5432/dadms
  #     - REDIS_URL=redis://redis:6379
  #     - MINIO_ENDPOINT=minio:9000
  #     - AI_ASSISTANT_ENABLED=true
  #     - REAL_TIME_COLLABORATION=true
  #     - WEBSOCKET_ENABLED=true
  #     - BPMN_ENGINE_URL=http://camunda:8080/engine-rest
  #     - DEFAULT_APPROVAL_TIMEOUT=72
  #     - ESCALATION_ENABLED=true
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #     camunda:
  #       condition: service_healthy
  #   networks:
  #     - default

  # knowledge-service:
  #   build: ./dadms-services/knowledge
  #   ports:
  #     - "3006:3006"
  #   depends_on:
  #     - postgres
  #     - qdrant

  # llm-service:
  #   build: ./dadms-services/llm
  #   ports:
  #     - "3008:3008"
  #   depends_on:
  #     - redis

  # dadms-ui:
  #   build: ./dadms-ui
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - user-project-service
  #     - knowledge-service
  #     - llm-service

  # MinIO - Object Storage for Artifacts
  minio:
    image: docker.io/minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9002:9000"   # S3 API
      - "9001:9001"   # MinIO Console
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Neo4j - Graph Database for Process/Task Relationships
  neo4j:
    image: docker.io/neo4j:5.13
    container_name: neo4j
    environment:
      NEO4J_AUTH: neo4j/testpassword
    ports:
      - "7474:7474"   # HTTP
      - "7687:7687"   # Bolt
    volumes:
      - neo4j-data:/data
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "testpassword", "RETURN 1"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Neo4j Memory - Dedicated Graph Database for MCP AI Memory
  neo4j-memory:
    image: docker.io/neo4j:5.13
    container_name: neo4j-memory
    environment:
      NEO4J_AUTH: neo4j/memorypassword
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
    ports:
      - "7475:7474"   # HTTP (different port to avoid conflict)
      - "7688:7687"   # Bolt (different port to avoid conflict)
    volumes:
      - neo4j-memory-data:/data
      - neo4j-memory-backups:/backups
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "memorypassword", "RETURN 1"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Jupyter Lab - Interactive Development Environment
  jupyter-lab:
    image: docker.io/jupyter/scipy-notebook:latest
    container_name: jupyter-lab
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=dadms_jupyter_token
      - JUPYTER_ALLOW_REMOTE_ACCESS=yes
      - JUPYTER_ENABLE_LAB_EXTENSION=yes
      - PYTHONUNBUFFERED=1
      - JUPYTER_CONFIG_DIR=/home/jovyan/.jupyter
    ports:
      - "8888:8888"
    volumes:
      - jupyter-data:/home/jovyan/work
      - ./jupyter-config:/home/jovyan/.jupyter
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --ServerApp.token=dadms_jupyter_token --ServerApp.allow_origin='*' --ServerApp.disable_check_xsrf=True
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # camunda:
  #   image: camunda/camunda-bpm-platform:latest
  #   container_name: dadms-camunda
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - DB_DRIVER=org.postgresql.Driver
  #     - DB_URL=jdbc:postgresql://postgres:5432/dadms
  #     - DB_USERNAME=dadms_user
  #     - DB_PASSWORD=dadms_password
  #     - WAIT_FOR=postgres:5432
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/camunda/app/admin/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 60s
  #   networks:
  #     - default

volumes:
  postgres_data:
  qdrant_data:
  redis_data:
  camunda_data:
  ollama_data:
  minio-data:
  neo4j-data:
  neo4j-memory-data:
  neo4j-memory-backups:
  jupyter-data:


networks:
  default:
    name: dadms-network
