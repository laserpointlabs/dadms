"""
Simple runner script for the OpenAI Decision Process
"""
import sys
import os
import logging
import time
from datetime import datetime

# Configure basic logging
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Add project root to path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Import required modules
try:
    from src import EnhancedServiceOrchestrator
    from config import camunda_config
    from config.service_registry import SERVICE_REGISTRY
    from camunda.external_task.external_task_worker import ExternalTaskWorker
except ImportError as e:
    logger.error(f"Error importing required modules: {str(e)}")
    logger.error("Please make sure all dependencies are installed.")
    sys.exit(1)

# Create orchestrator
orchestrator = EnhancedServiceOrchestrator(
    service_registry=SERVICE_REGISTRY,
    debug=True,
    enable_metrics=True
)

def handle_task(task):
    """Process a task using the orchestrator"""
    task_name = task.get_activity_id()
    logger.info(f"Processing task: {task_name}")
    
    # Get variables as a regular dict
    variables = {
        key: (value.get('value') if isinstance(value, dict) and 'value' in value else value)
        for key, value in task.get_variables().items()
    }
    
    # Process the task with orchestrator
    start_time = time.time()
    result = orchestrator.route_task(task, variables)
    processing_time = time.time() - start_time
    
    # Log the result
    logger.info(f"Task {task_name} completed in {processing_time:.2f} seconds")
    
    # Create variables to complete the task with
    return {
        "task_name": task_name,
        "processed_by": result.get("processed_by", "EnhancedOrchestrator"),
        "processed_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "recommendation": result.get("recommendation", ""),
        "analysis": result.get("analysis", "")
    }

def run_workers():
    """Start workers for all topics"""
    # Topics in the BPMN model
    topics = [
        {"topicName": "FrameDecision", "lockDuration": 10000},
        {"topicName": "IdentifyAlternatives", "lockDuration": 10000},
        {"topicName": "EvaluateAlternatives", "lockDuration": 10000},
        {"topicName": "MakeRecommendation", "lockDuration": 10000}
    ]
    
    # Configure the worker
    config = {
        "maxTasks": 1,
        "lockDuration": 10000,
        "asyncResponseTimeout": 5000,
        "retries": 3,
        "retryTimeout": 5000,
        "sleepSeconds": 1
    }
      # Create a single worker that handles all topics
    worker = ExternalTaskWorker(
        worker_id=f"decision_process_worker_{int(time.time())}",
        base_url=camunda_config.CAMUNDA_ENGINE_URL,
        config=config
    )
    
    logger.info(f"Starting worker for topics: {[t['topicName'] for t in topics]}")
    worker.subscribe(topics, handle_task)
    logger.info(f"Camunda Engine URL: {camunda_config.CAMUNDA_ENGINE_URL}")
    logger.info("Press Ctrl+C to stop the worker")
    
    try:
        worker.subscribe(handle_task)
    except KeyboardInterrupt:
        logger.info("Worker stopped by user")
    except Exception as e:
        logger.error(f"Error: {str(e)}")
    finally:
        # Close orchestrator session
        orchestrator.close()
        logger.info("Orchestrator session closed")

if __name__ == "__main__":
    run_workers()
